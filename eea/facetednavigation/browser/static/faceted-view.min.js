/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 603:
/***/ (function() {

(function (jQuery) {
    jQuery.fn.collapsible = function (settings) {
        var self = this;
        self.colapsed = false;

        var options = {
            maxitems: 0,
            elements: "li",
            more: "More",
            less: "Less",

            events: {
                refresh: "widget-refresh",
                expand: "widget-expand",
                colapse: "widget-colapse",
            },

            // Event handlers
            handle_refresh: function () {
                jQuery(options.elements, self).show();
                self.button.hide();

                if (!options.maxitems) {
                    return;
                }

                var elements = jQuery(options.elements, self);
                if (elements.length < options.maxitems) {
                    return;
                }

                if (self.colapsed) {
                    jQuery("a", self.button).text(options.more);
                } else {
                    jQuery("a", self.button).text(options.less);
                }
                self.button.show();

                if (!self.colapsed) {
                    return;
                }

                elements.each(function (index) {
                    if (index < options.maxitems) {
                        jQuery(this).show();
                    } else {
                        jQuery(this).hide();
                    }
                });
            },

            handle_expand: function () {
                self.colapsed = false;
                self.trigger(options.events.refresh);
            },

            handle_colapse: function () {
                self.colapsed = true;
                self.trigger(options.events.refresh);
            },

            // Init
            initialize: function () {
                // Handle events
                self.bind(options.events.refresh, function (evt, data) {
                    options.handle_refresh(evt, data);
                });

                self.bind(options.events.expand, function (evt, data) {
                    options.handle_expand(evt, data);
                });

                self.bind(options.events.colapse, function (evt, data) {
                    options.handle_colapse(evt, data);
                });

                // More/Less button
                var link = jQuery("<a>").attr("href", "#").text("More");
                self.button = jQuery("<div>")
                    .addClass("faceted-checkbox-more")
                    .append(link)
                    .hide();
                self.append(self.button);

                link.on("click", function () {
                    if (self.colapsed) {
                        self.trigger(options.events.expand);
                    } else {
                        self.trigger(options.events.colapse);
                    }
                    return false;
                });

                if (options.maxitems) {
                    link.trigger("click");
                }
            },
        };

        if (settings) {
            jQuery.extend(options, settings);
        }

        options.initialize();
        return this;
    };
})(jQuery);


/***/ }),

/***/ 293:
/***/ (function() {

/*
  Help function which let you have
  normal independent input element sends values to a
  eea.facetednavigation object the correct way.

  How to use it. HTML example:

  <h2>Global search on data and maps</h2>
  <form action="find/global" method="get" class="faceted-external-search">
    <input type="text" name="c12" value="" />
    <input type="submit" value="Go!" name="search" />
  </form>

  c12 = is the parameter id of your text search facet.

*/
jQuery(function () {
    jQuery("form.faceted-external-search").on("submit", function (evt) {
        evt.preventDefault();
        var form = jQuery(this);
        var action = form.attr("action");
        var query = form.serialize();
        window.location.href = action + "#" + query;
    });
});


/***/ }),

/***/ 739:
/***/ (function() {

var Faceted;
if (window.Faceted !== undefined) {
    Faceted = window.Faceted;
} else {
    Faceted = window.Faceted = { version: "15.0" };
}
/* Events
 */
Faceted.Events = {};
Faceted.Events.INITIALIZE = "FACETED-INITIALIZE";
Faceted.Events.AJAX_QUERY_START = "FACETED-AJAX-QUERY-START";
Faceted.Events.AJAX_QUERY_SUCCESS = "FACETED-AJAX-QUERY-SUCCESS";
Faceted.Events.QUERY_INITIALIZED = "FACETED-QUERY-INITIALIZED";
Faceted.Events.QUERY_CHANGED = "FACETED-QUERY-CHANGED";
Faceted.Events.RESET = "FACETED-RESET";
Faceted.Events.FORM_DO_QUERY = "FACETED-FORM-DO-QUERY";
Faceted.Events.WINDOW_WIDTH_CHANGED = "FACETED-WINDOW-WIDTH-CHANGED";
Faceted.Events.WINDOW_HEIGHT_CHANGED = "FACETED-WINDOW-HEIGHT-CHANGED";
Faceted.Events.AJAX_START = "FACETED-AJAX-START";
Faceted.Events.AJAX_STOP = "FACETED-AJAX-STOP";
Faceted.Events.AJAX_ERROR = "FACETED-AJAX-ERROR";
Faceted.Events.REDRAW = "FACETED-REDRAW";
Faceted.Events.HASHCHANGE = "hashchange.FACETED-HASHCHANGE";
Faceted.Events.DO_UPDATE = "FACETED-DO_UPDATE";
Faceted.Events.CLEANUP_COMPLETED = "FACETED-CLEANUP-COMPLETED";

/* Unbind events
 */
Faceted.Events.cleanup = function () {
    jQuery(Faceted.Events).off(Faceted.Events.AJAX_QUERY_START);
    jQuery(Faceted.Events).off(Faceted.Events.AJAX_QUERY_SUCCESS);
    jQuery(Faceted.Events).off(Faceted.Events.QUERY_INITIALIZED);
    jQuery(Faceted.Events).off(Faceted.Events.QUERY_CHANGED);
    jQuery(Faceted.Events).off(Faceted.Events.RESET);
    jQuery(Faceted.Events).off(Faceted.Events.FORM_DO_QUERY);
    jQuery(Faceted.Events).off(Faceted.Events.WINDOW_WIDTH_CHANGED);
    jQuery(Faceted.Events).off(Faceted.Events.WINDOW_HEIGHT_CHANGED);
    jQuery(Faceted.Events).off(Faceted.Events.AJAX_START);
    jQuery(Faceted.Events).off(Faceted.Events.AJAX_STOP);
    jQuery(Faceted.Events).off(Faceted.Events.AJAX_ERROR);
    jQuery(Faceted.Events).off(Faceted.Events.REDRAW);
    c;
    jQuery(Faceted.Events).off(Faceted.Events.DO_UPDATE);
    // jQuery(window).unbind(Faceted.Events.HASHCHANGE);
    window.removeEventListener("hashchange", Faceted.hash_changed);
    /* trigger cleanup completed event once events cleanup is done */
    jQuery(Faceted.Events).trigger(Faceted.Events.CLEANUP_COMPLETED);
};

/* Widgets
 */
Faceted.Widgets = {};

/* Query
 */
Faceted.Query = {};

/* Context url.
Default: (context related)
*/
Faceted.BASEURL = "";

/* UI Options
 */
Faceted.Options = {};
Faceted.Options.SHOW_SPINNER = true;
Faceted.Options.FADE_SPEED = "fast";

/* Return minimal and sorted query
 */
Faceted.SortedQuery = function (query) {
    if (!query) {
        query = Faceted.Query;
    }

    var keys = [];
    jQuery.each(query, function (key) {
        if (!this || this == "all") {
            return;
        }
        keys.push(key);
    });

    keys.sort();
    var res = {};
    jQuery.each(keys, function () {
        res[this] = query[this];
    });
    return res;
};

Faceted.Window = {
    initialize: function () {
        this.width = jQuery(window).width();
        this.height = jQuery(window).height();
        var js_window = this;
        jQuery(window).resize(function () {
            js_window.width_change();
            js_window.height_change();
        });

        // Full screen icon clicked
        var fullscreen = jQuery("a:has(img#icon-full_screen)");
        if (fullscreen.length) {
            js_window.toggle_fullscreen(fullscreen);
        }
    },

    width_change: function () {
        var width = jQuery(window).width();
        if (width != this.width) {
            this.width = width;
            jQuery(Faceted.Events).trigger(Faceted.Events.WINDOW_WIDTH_CHANGED, {
                width: width,
            });
        }
    },

    height_change: function () {
        var height = jQuery(window).height();
        if (height != this.height) {
            this.height = height;
            jQuery(Faceted.Events).trigger(Faceted.Events.WINDOW_HEIGHT_CHANGED, {
                height: height,
            });
        }
    },

    toggle_fullscreen: function (button) {
        button.attr("href", "#");
        button.on("click", function () {
            var toggleFullScreenMode = window.toggleFullScreenMode;
            if (toggleFullScreenMode) {
                toggleFullScreenMode();
                jQuery(Faceted.Events).trigger(Faceted.Events.WINDOW_WIDTH_CHANGED);
            }
            return false;
        });
    },
};

/*
  @class Faceted.Form
*/
Faceted.Form = {
    initialize: function () {
        this.form = jQuery("#faceted-form");
        // Handle form submit event
        this.area = jQuery("#faceted-results");
        this.mode = this.form.data("mode") || "view";
        this.area_html = this.area.html();

        // Faceted version
        this.version = "";
        var version = jQuery("#faceted-version", this.form);
        if (version) {
            this.version = version.text();
        }

        // Handle errors
        var self = this;
        jQuery(document).ajaxError(function (event, request, settings, thrownError) {
            jQuery(self.area).html(self.area_html);
            console.error("AJAX ERROR", event, request, settings, thrownError);
            jQuery(Faceted.Events).trigger(Faceted.Events.AJAX_ERROR);
        });

        var hashquery = Faceted.URLHandler.get();
        var has_hash = !jQuery.isEmptyObject(hashquery);


        if (has_hash) {
            Faceted.Query = hashquery;
        }

        if (Faceted.Query.b_start === undefined) {
            Faceted.Query.b_start = 0;
        }

        if (this.mode === "search" && !has_hash) {
            /* if we are in search mode
             * and we don't have a request set up in URL
             * (this the case when we click 'back' button
             * we don't execute an initial search
             */
            return;
        }

        jQuery(Faceted.Events).trigger(Faceted.Events.QUERY_INITIALIZED);


        if (!has_hash) {
            Faceted.URLHandler.set();
        } else {
            Faceted.URLHandler.hash_changed();
        }
    },

    initialize_paginator: function () {
        var context = this;
        Faceted.b_start_changed = false;
        jQuery(".pagination a").each(function () {
            jQuery(this).on("click", function () {
                var href = jQuery(this).attr("href");
                var regex = new RegExp("b_start\\:int=(\\d+)");
                var b_start = regex.exec(href)[1];
                Faceted.b_start_changed = true;
                context.do_query("b_start", b_start);
                return false;
            });
        });
    },

    reset: function () {
        Faceted.Query = {};
    },

    do_query: function (wid, value) {
        // Update query
        if (wid != "b_start" && !Faceted.b_start_changed) {
            Faceted.Query.b_start = 0;
        }

        if (!value) {
            value = [];
        }
        if (wid) {
            Faceted.Query[wid] = value;
        }
        jQuery(Faceted.Events).trigger(Faceted.Events.FORM_DO_QUERY, { wid: wid });
        // Update url
        Faceted.URLHandler.set();
    },

    do_form_query: function () {
        var context = this;
        if (Faceted.Query.b_start === undefined) {
            Faceted.Query.b_start = 0;
        }
        jQuery(Faceted.Events).trigger(Faceted.Events.AJAX_QUERY_START);
        context.area.fadeOut("fast", function () {
            if (Faceted.Options.SHOW_SPINNER) {
                var loading = '<div class="faceted_loading"></div>';
                context.area_html = context.area.html();
                context.area.html(loading);
                context.area.fadeIn(Faceted.Options.FADE_SPEED);
            }

            var query = Faceted.SortedQuery();
            // avoid "[]" in b_start parameter name (eg. ?b_start[]=0)
            // this fixes double b_start in the request (eg. ?b_start[]=0&b_start:int=0)
            query.b_start = query.b_start[0];
            if (context.version) {
                query.version = context.version;
            }
            jQuery.get(Faceted.BASEURL + "@@faceted_query", query, function (data) {
                context.area.fadeOut("fast", function () {
                    context.area.html(data);
                    context.area.fadeIn(Faceted.Options.FADE_SPEED);
                    jQuery(Faceted.Events).trigger(Faceted.Events.AJAX_QUERY_SUCCESS);
                });
            });
        });
    },
    /* Errors
     */
    highlight: function (elements, css_class, remove) {
        for (var i = 0; i < elements.length; i++) {
            var element = jQuery("#" + elements[i]);
            if (remove) {
                jQuery(element).removeClass(css_class);
            } else {
                jQuery(element).addClass(css_class);
            }
        }
    },

    raise_error: function (msg, error_area, highlights) {
        var area = jQuery("#" + error_area);
        msg = '<div class="portalMessage">' + msg + "</div>";
        area.html(msg);
        this.highlight(highlights, "error");
    },

    clear_errors: function (error_area, highlights) {
        var area = jQuery("#" + error_area);
        area.html("");
        this.highlight(highlights, "error", true);
    },
};

Faceted.hash_changed = function () {
    return Faceted.URLHandler.hash_changed();
};

Faceted.URLHandler = {
    initialize: function () {},

    hash_changed: function () {
        Faceted.Query = this.get();
        jQuery(Faceted.Events).trigger(Faceted.Events.QUERY_CHANGED);
        Faceted.Form.do_form_query();
    },

    document_hash: function () {
        var r = window.location.href;
        var i = r.indexOf("#");
        return i >= 0 ? r.substr(i + 1) : "";
    },

    get: function () {
        const hash = Object.fromEntries(
            new URLSearchParams(
                window.location.hash.substring(1) // any_hash_key=any_value
            )
        );

        var query = {};
        var types = ["number", "boolean", "string"];
        jQuery.each(hash, function (key, value) {
            var value_type = typeof value;
            if (jQuery.inArray(value_type, types) !== -1) {
                value = [value];
            }
            query[key] = value;
        });
        return query;
    },

    set: function (query) {
        if (!query) {
            query = Faceted.Query;
        }
        query = jQuery.param(query, true);

        window.location.hash = `#${query}`;
    },
};

Faceted.Sections = {
    initialize: function () {
        var self = this;
        self.form = jQuery(".faceted-form");
        self.advanced = jQuery(".faceted-advanced-widgets", self.form).hide();
        self.buttons = jQuery(".faceted-sections-buttons", self.form);
        if (!self.advanced.length) {
            self.buttons.remove();
            return;
        }

        self.more = jQuery(".faceted-sections-buttons-more", self.form).show();
        self.less = jQuery(".faceted-sections-buttons-less", self.form).hide();

        jQuery("a", self.buttons).on("click", function (evt) {
            self.toggle(jQuery(this), evt);
            return false;
        });
    },

    toggle: function () {
        this.more.toggle();
        this.less.toggle();
        this.advanced.toggle("blind");

        // Refresh tags facets
        var tags = jQuery(".faceted-tagscloud-widget:visible", this.form);
        if (tags.length) {
            jQuery(Faceted.Events).trigger(Faceted.Events.WINDOW_WIDTH_CHANGED);
        }
    },
};

Faceted.AjaxLook = {
    initialize: function () {
        this.slaves = [];
        this.locked = false;
        // Events
        var js_object = this;
        jQuery(Faceted.Events).on(Faceted.Events.AJAX_START, function (evt, data) {
            js_object.add(data.wid);
        });

        jQuery(Faceted.Events).on(Faceted.Events.AJAX_STOP, function (evt, data) {
            js_object.remove(data.wid);
        });

        jQuery(Faceted.Events).on(Faceted.Events.AJAX_QUERY_START, function () {
            js_object.add("faceted-results");
        });

        jQuery(Faceted.Events).on(Faceted.Events.AJAX_QUERY_SUCCESS, function () {
            js_object.remove("faceted-results");
        });

        jQuery(Faceted.Events).on(Faceted.Events.AJAX_ERROR, function () {
            jQuery(this.slaves).each(function (index) {
                js_object.remove(js_object.slaves[index]);
            });
        });
    },

    add: function (wid) {
        this.lock();
        this.slaves.push(wid);

        var widget = jQuery("#" + wid + "_widget");
        if (widget.length) {
            widget.addClass("faceted-widget-loading");
        }
    },

    remove: function (wid) {
        if (this.slaves.length) {
            this.slaves = jQuery.map(this.slaves, function (slave) {
                if (slave == wid) {
                    return null;
                }
                return slave;
            });
        }

        var widget = jQuery("#" + wid + "_widget");
        if (widget.length) {
            widget.removeClass("faceted-widget-loading");
        }
        this.unlock();
    },

    lock: function () {
        if (this.locked) {
            // Already locked
            return;
        }
        this.locked = true;
        jQuery.each(Faceted.Widgets, function () {
            this.widget.addClass("faceted-widget-locked");
        });

        var overlay = jQuery("<div>");
        overlay.addClass("faceted-lock-overlay");
        overlay.addClass("ui-widget-overlay");
        overlay.css("z-index", 1001);
        jQuery("#faceted-form").append(overlay);
    },

    unlock: function () {
        if (this.slaves.length) {
            return;
        }
        this.locked = false;

        jQuery.each(Faceted.Widgets, function () {
            this.widget.removeClass("faceted-widget-locked");
        });

        jQuery(".faceted-lock-overlay").remove();
    },
};

/* Load facetednavigation
 */
Faceted.Load = function (evt, baseurl) {
    if (baseurl) {
        Faceted.BASEURL = baseurl;
    }

    // Remove widgets with errors
    jQuery(".faceted-widget:has(div.faceted-widget-error)").remove();

    jQuery(Faceted.Events).on(Faceted.Events.REDRAW, function () {
        if (jQuery("#faceted-left-column:has(div.faceted-widget)").length) {
            jQuery("#center-content-area").addClass("left-area-js");
        } else {
            jQuery("#center-content-area").removeClass("left-area-js");
        }

        if (jQuery("#faceted-right-column:has(div.faceted-widget)").length) {
            jQuery("#center-content-area").addClass("right-area-js");
        } else {
            jQuery("#center-content-area").removeClass("right-area-js");
        }
    });
    jQuery(Faceted.Events).trigger(Faceted.Events.REDRAW);

    // Init widgets UI
    jQuery(Faceted.Events).trigger(Faceted.Events.INITIALIZE);

    // Bind events
    // jQuery(window).on(Faceted.Events.HASHCHANGE, function(evt){
    //   Faceted.URLHandler.hash_changed();
    // });
    window.addEventListener("hashchange", Faceted.hash_changed, false);

    jQuery(Faceted.Events).on(Faceted.Events.AJAX_QUERY_SUCCESS, function () {
        Faceted.Form.initialize_paginator();
    });
    jQuery(Faceted.Events).on(Faceted.Events.RESET, function () {
        Faceted.Form.reset();
    });

    Faceted.Window.initialize();
    Faceted.Sections.initialize();
    Faceted.AjaxLook.initialize();
    Faceted.Form.initialize();

    // Override calendar close handler method in order to raise custom events
    if (window.Calendar) {
        window.Calendar.prototype.callCloseHandler = function () {
            // Original code
            if (this.onClose) {
                this.onClose(this);
            }
            this.hideShowCovered();
            // Custom events
            var wid = this.params.inputField.id;
            wid = wid.split("_")[2];
            if (!wid) {
                return false;
            }

            var widget = Faceted.Widgets[wid];
            widget.do_query();
            return false;
        };
    }
};

Faceted.Unload = function () {};

/* Cleanup
 */
Faceted.Cleanup = function () {
    // Unbind events
    Faceted.Events.cleanup();

    // Reset
    Faceted.Widgets = {};
    Faceted.Query = {};

    // Reset URL hash
    Faceted.URLHandler.set();
};

// Unload
jQuery(window).on("unload", function () {
    var context = jQuery("body").find(".faceted-form");
    if (context.length) {
        Faceted.Unload();
    }
});

// Load
jQuery(function (evt) {
    var context = jQuery("body").find(".faceted-form");
    if (context.length) {
        Faceted.Load(evt, context.data("baseurl"));
    }
});


/***/ }),

/***/ 383:
/***/ (function() {

/* Alphabetical Widget
 */
Faceted.AlphabeticalWidget = function (wid) {
    this.wid = wid;
    this.widget = jQuery("#" + wid + "_widget");
    this.widget.show();
    this.title = jQuery("legend", this.widget).html();

    this.letters = jQuery("#" + wid + " span");
    this.selected = [];

    // Faceted version
    this.version = "";
    var version = jQuery("#faceted-version");
    if (version) {
        this.version = version.text();
    }

    // Set default value
    var selected = jQuery(".faceted_letter_selected");
    if (selected.length) {
        Faceted.Query[this.wid] = [selected.attr("id").split("-")[1]];
        this.synchronize();
    }

    // Handle letter click
    var js_widget = this;
    this.letters.on("click", function (evt) {
        js_widget.letter_click(this, evt);
    });

    // Bind events
    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        js_widget.synchronize();
    });
    jQuery(Faceted.Events).on(Faceted.Events.RESET, function () {
        js_widget.reset();
    });
    if (this.widget.hasClass("faceted-count")) {
        var sortcountable = this.widget.hasClass("faceted-sortcountable");
        jQuery(Faceted.Events).on(Faceted.Events.QUERY_INITIALIZED, function () {
            js_widget.count(sortcountable);
        });
        jQuery(Faceted.Events).on(Faceted.Events.FORM_DO_QUERY, function (evt, data) {
            if (data.wid == js_widget.wid || data.wid == "b_start") {
                return;
            }
            js_widget.count(sortcountable);
        });
    }
};

Faceted.AlphabeticalWidget.prototype = {
    letter_click: function (letter) {
        this.do_query(letter);
    },

    letter_unselect: function (letter) {
        jQuery(letter).removeClass("faceted_letter_selected");
        this.widget.removeClass("faceted-widget-active");
        this.selected = [];
    },

    letter_select: function (letter) {
        this.letter_unselect(this.letters);
        jQuery(letter).addClass("faceted_letter_selected");
        if (jQuery(letter).attr("id").split("-")[1] != "all") {
            this.widget.addClass("faceted-widget-active");
            this.selected = [letter];
        }
    },

    do_query: function (letter) {
        var value = jQuery(letter).attr("id").split("-")[1];
        var selected_value = "";
        if (this.selected.length) {
            selected_value = jQuery(this.selected[0]).attr("id").split("-")[1];
        }
        if (value == selected_value) {
            this.letter_select(jQuery("#" + this.wid + "-all"), this.widget);
            value = [];
        } else {
            this.letter_select(letter);
        }
        Faceted.Form.do_query(this.wid, value);
    },

    reset: function () {
        this.letter_select(jQuery("#" + this.wid + "-all", this.widget));
    },

    synchronize: function () {
        var value = Faceted.Query[this.wid];
        if (!value) {
            this.reset();
        } else {
            var letter = jQuery("#" + this.wid + "-" + value[0]);
            if (letter.length) {
                this.letter_select(letter[0]);
            } else {
                this.reset();
            }
        }
    },

    criteria: function () {
        var html = [];
        var title = this.criteria_title();
        var body = this.criteria_body();
        if (title) {
            html.push(title);
        }
        if (body) {
            html.push(body);
        }
        return html;
    },

    criteria_title: function () {
        if (!this.selected.length) {
            return "";
        }
        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", "criteria_" + this.wid);
        link.attr("title", "Remove " + this.title + " filters");
        var widget = this;
        link.on("click", function (evt) {
            widget.criteria_remove(this, evt);
            return false;
        });

        var html = jQuery("<dt>");
        html.attr("id", "criteria_" + this.wid + "_label");
        html.append(link);
        html.append("<span>" + this.title + "</span>");
        return html;
    },

    criteria_body: function () {
        if (!this.selected.length) {
            return "";
        }
        var label = jQuery(this.selected[0]).attr("id").split("-")[1];
        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", "criteria_" + this.wid + "_" + label);
        link.attr("title", "Remove " + label + " filter");

        var widget = this;
        link.on("click", function (evt) {
            widget.criteria_remove(this, evt);
            return false;
        });

        var html = jQuery("<dd>");
        html.attr("id", "criteria_" + this.wid + "_entries");
        var span = jQuery('<span class="faceted-alphabetic-criterion">');
        span.append(link);
        jQuery("<span>").text(label).appendTo(span);
        html.append(span);
        return html;
    },

    criteria_remove: function () {
        this.do_query(this.selected[0]);
    },

    count: function (sortcountable) {
        var query = Faceted.SortedQuery();
        query.cid = this.wid;
        if (this.version) {
            query.version = this.version;
        }

        var context = this;
        jQuery(Faceted.Events).trigger(Faceted.Events.AJAX_START, { wid: context.wid });
        jQuery.getJSON(Faceted.BASEURL + "@@faceted_counter", query, function (data) {
            context.count_update(data, sortcountable);
            jQuery(Faceted.Events).trigger(Faceted.Events.DO_UPDATE);
            jQuery(Faceted.Events).trigger(Faceted.Events.AJAX_STOP, {
                wid: context.wid,
            });
        });
    },

    count_update: function (data, sortcountable) {
        var context = this;
        context.letters.each(function () {
            var letter = jQuery(this);
            letter.removeClass("faceted-alphabetic-letter-disabled");
            letter.unbind();
            var key = letter.attr("id").split("-")[1];
            var value = data[key];
            value = value ? value : 0;
            letter.attr("title", value);
            if (sortcountable) {
                letter.data("count", value);
            }
            if (!value) {
                letter.addClass("faceted-alphabetic-letter-disabled");
            } else {
                letter.on("click", function (evt) {
                    context.letter_click(this, evt);
                });
            }
        });
        if (sortcountable) {
            context.letters.detach().sort(function (x, y) {
                var a = jQuery(x).data("count");
                var b = jQuery(y).data("count");
                return b - a;
            });
        }
        jQuery("#" + context.wid, context.widget).append(context.letters);
    },
};

Faceted.initializeAlphabeticalWidget = function () {
    jQuery("div.faceted-alphabetic-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.AlphabeticalWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(
    Faceted.Events.INITIALIZE,
    Faceted.initializeAlphabeticalWidget
);


/***/ }),

/***/ 117:
/***/ (function() {

/* Autocomplete Widget
 */
Faceted.AutocompleteWidget = function (wid) {
    var self = this;
    this.wid = wid;
    this.widget = jQuery("#" + wid + "_widget");
    this.widget.show();
    this.title = jQuery("legend", this.widget).html();
    this.elements = this.widget.find("option");
    this.select = jQuery("#" + this.wid);
    this.multiple = this.widget.data("multiple") ? true : false;
    this.placeholder = this.widget.data("placeholder");
    this.autocomplete_view = this.widget.data("autocomplete-view");
    this.selected = [];
    this.button = jQuery("input[type=submit]", this.widget);

    this.select.select2({
        placeholder: this.placeholder,
        multiple: this.multiple,
        allowClear: true,
        minimumInputLength: 2,
        ajax: {
            url: this.autocomplete_view,
            delay: 250,
            dataType: "json",
            params: {
                global: false,
            },
            data: function (term) {
                return {
                    term: term,
                    add_terms: true,
                };
            },
            results: function (data) {
                return {
                    results: data,
                };
            },
            cache: false,
        },
    });

    // Handle text change
    jQuery("form", this.widget).on("submit", function () {
        return false;
    });

    if (this.button.length) {
        this.button.on("click", function () {
            self.text_change(self.button);
        });
    } else {
        this.select.on("select2-close", function (evt) {
            self.select_change(this, evt);
        });

        this.select.on("select2-removed", function (evt) {
            self.select_change(this, evt);
        });
    }

    // Default value
    var value = this.select.select2("val");
    if (value) {
        this.selected = [this.select];
        if (this.multiple) {
            Faceted.Query[this.wid] = value;
        } else {
            Faceted.Query[this.wid] = [value];
        }
    }

    // Bind events
    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        self.synchronize();
    });
    jQuery(Faceted.Events).on(Faceted.Events.RESET, function () {
        self.reset();
    });
};

Faceted.AutocompleteWidget.prototype = {
    select_change: function (element) {
        if (!jQuery(element).val()) {
            element = null;
        }
        this.do_query(element);
    },

    text_change: function (element) {
        this.do_query(element);
        jQuery(element).removeClass("submitting");
    },

    do_query: function (element) {
        var value = this.select.select2("val");
        if (value && !Array.isArray(value)) {
            value = [value];
        }

        if (!element) {
            this.selected = [];
            return Faceted.Form.do_query(this.wid, []);
        }
        this.selected = [this.select];

        var where = jQuery("input[type=radio]:checked", this.widget);
        where = where.length == 1 ? where.val() : "all";
        if (where == "all") {
            return Faceted.Form.do_query(this.wid, value);
        }

        var current = Faceted.Query[this.wid] || [];
        jQuery.each(value, function (idx, val) {
            if (!current.includes(val)) {
                current.push(val);
            }
        });
        return Faceted.Form.do_query(this.wid, current);
    },

    reset: function () {
        this.selected = [];
        this.widget.removeClass("faceted-widget-active");
        this.select.select2("val", null);
    },

    synchronize: function () {
        var self = this;
        var value = Faceted.Query[this.wid];
        if (!value) {
            return this.reset();
        }

        if (!Array.isArray(value)) {
            value = [value];
        }

        var data = [];
        jQuery.each(value, function (idx, val) {
            var item = { id: val, text: val };
            if (self.multiple) {
                data.push(item);
            } else {
                data = item;
            }
        });

        this.select.select2("data", data);
        this.selected = [this.select];
        this.widget.addClass("faceted-widget-active");
    },

    criteria: function () {
        var html = [];
        var title = this.criteria_title();
        var body = this.criteria_body();
        if (title) {
            html.push(title);
        }
        if (body) {
            html.push(body);
        }
        return html;
    },

    criteria_title: function () {
        if (!this.selected.length) {
            return "";
        }

        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", "criteria_" + this.wid);
        link.attr("title", "Remove " + this.title + " filters");
        var widget = this;
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });

        var html = jQuery("<dt>");
        html.attr("id", "criteria_" + this.wid + "_label");
        html.append(link);
        html.append("<span>" + this.title + "</span>");
        return html;
    },

    criteria_body: function () {
        if (!this.selected.length) {
            return "";
        }

        var widget = this;
        var html = jQuery("<dd>");
        var elements = Faceted.Query[this.wid];
        elements = elements ? elements : [];
        jQuery.each(elements, function () {
            var label = this.toString();
            if (label.length > 0) {
                var span = jQuery('<span class="faceted-autocomplete-criterion">');
                var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
                link.attr("id", "criteria_" + widget.wid + "_" + label);
                link.attr("title", "Remove " + label + " filter");
                link.on("click", function () {
                    widget.criteria_remove(label);
                    return false;
                });
                span.append(link);
                jQuery("<span>").text(label).appendTo(span);
                html.append(span);
            }
        });
        return html;
    },

    criteria_remove: function (value) {
        if (!value) {
            this.reset();
            return this.do_query();
        }

        var current = Faceted.Query[this.wid] || [];
        Faceted.Query[this.wid] = current.filter(function (item) {
            return item != value;
        });

        this.synchronize();
        this.do_query(this.select);
    },
};

Faceted.initializeAutocompleteWidget = function () {
    jQuery("div.faceted-autocomplete-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.AutocompleteWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(
    Faceted.Events.INITIALIZE,
    Faceted.initializeAutocompleteWidget
);


/***/ }),

/***/ 185:
/***/ (function() {

/* Checkboxes Widget
 */
Faceted.CheckboxesWidget = function (wid) {
    var self = this;
    this.wid = wid;
    this.widget = jQuery("#" + wid + "_widget");
    this.widget.show();
    this.fieldset = jQuery(".widget-fieldset", this.widget);
    this.title = jQuery("legend", this.widget).html();
    this.elements = jQuery("form input[type=checkbox]", this.widget);
    this.maxitems = parseInt(jQuery("span", this.widget).text(), 10);

    this.operatorElem = this.widget.find(".faceted-operator a");
    this.operatorVisible = this.operatorElem.length ? true : false;

    if (this.operatorVisible) {
        this.operator = this.operatorElem.data("value");

        // Handle operator click
        this.operatorElem.on("click", function (evt) {
            evt.preventDefault();
            self.operator_click(this, evt);
        });

        // Update text
        this.operatorElem.text(this.operatorElem.data(this.operator));
    } else {
        this.operator = this.widget.data("operator");
    }

    this.selected = [];

    // Faceted version
    this.version = "";
    var version = jQuery("#faceted-version");
    if (version) {
        this.version = version.text();
    }

    jQuery("form", this.widget).on("submit", function () {
        return false;
    });

    // Handle checkbox click
    this.elements.on("click", function (evt) {
        self.checkbox_click(this, evt);
    });

    // Default values
    var selected = this.widget.find("form input[type=checkbox]:checked");
    if (selected.length) {
        this.selected = selected;
        Faceted.Query[this.wid] = [];
        selected.each(function () {
            Faceted.Query[self.wid].push(jQuery(this).val());
        });
    }

    if (this.operatorVisible) {
        Faceted.Query[self.wid + "-operator"] = self.operator;
    }

    // Handle More/Less buttons click
    if (this.maxitems) {
        this.fieldset.collapsible({
            maxitems: this.maxitems,
            elements: "li:not(.faceted-checkbox-item-zerocount)",
            more: this.widget.data("more"),
            less: this.widget.data("less"),
        });
    }

    // Bind events
    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        self.synchronize();
    });
    jQuery(Faceted.Events).on(Faceted.Events.RESET, function () {
        self.reset();
    });
    if (this.widget.hasClass("faceted-count")) {
        var sortcountable = this.widget.hasClass("faceted-sortcountable");
        jQuery(Faceted.Events).on(Faceted.Events.QUERY_INITIALIZED, function () {
            self.count(sortcountable);
        });
        jQuery(Faceted.Events).on(Faceted.Events.FORM_DO_QUERY, function (evt, data) {
            if (
                self.operator != "and" &&
                (data.wid == self.wid || data.wid == "b_start")
            ) {
                return;
            }
            self.count(sortcountable);
        });
    }
};

Faceted.CheckboxesWidget.prototype = {
    checkbox_click: function (element) {
        this.do_query(element);
    },

    operator_click: function () {
        var self = this;
        if (self.operator === "or") {
            self.operator = "and";
            self.operatorElem.text(self.operatorElem.data("and"));
        } else {
            self.operator = "or";
            self.operatorElem.text(self.operatorElem.data("or"));
        }
        Faceted.Form.do_query(this.wid + "-operator", self.operator);
    },

    operator_label: function () {
        if (!this.operatorVisible) {
            return "";
        }

        var label = this.widget.find(".faceted-operator label");
        label = label.length ? label.text() : "";
        label += " " + this.operatorElem.data(this.operator);

        return "(" + label + ")";
    },

    do_query: function () {
        this.selected = jQuery("form input[type=checkbox]:checked", this.widget);
        var value = [];
        this.selected.each(function () {
            value.push(jQuery(this).val());
        });
        Faceted.Form.do_query(this.wid, value);
    },

    reset: function () {
        // This is done by form.reset, so do nothing
        this.selected = [];
        this.widget.removeClass("faceted-widget-active");
        jQuery(this.elements).attr("checked", false);
    },

    synchronize: function () {
        this.elements.attr("checked", false);
        var checked = Faceted.Query[this.wid];
        if (checked) {
            jQuery("form input[type=checkbox]", this.widget).val(checked);
            this.selected = jQuery("form input[type=checkbox]:checked", this.widget);
            this.widget.addClass("faceted-widget-active");
        }

        var operator = Faceted.Query[this.wid + "-operator"];
        if (this.operatorVisible && operator) {
            operator = operator[0];
            this.operator = operator;
            this.operatorElem.data("value", operator);
            this.operatorElem.text(this.operatorElem.data(this.operator));
        }
    },

    criteria: function () {
        var html = [];
        var title = this.criteria_title();
        var body = this.criteria_body();
        if (title) {
            html.push(title);
        }
        if (body) {
            html.push(body);
        }
        return html;
    },

    criteria_title: function () {
        if (!this.selected.length) {
            return "";
        }
        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", "criteria_" + this.wid);
        link.attr("title", "Remove " + this.title + " filters");
        var widget = this;
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });

        var html = jQuery("<dt>");
        html.attr("id", "criteria_" + this.wid + "_label");
        html.append(link);
        html.append("<span>" + this.title + " " + this.operator_label() + "</span>");
        return html;
    },

    criteria_body: function () {
        if (!this.selected.length) {
            return "";
        }

        var widget = this;
        var html = jQuery("<dd>");
        html.attr("id", "criteria_" + this.wid + "_entries");

        widget.selected.each(function () {
            var span = jQuery('<span class="faceted-checkbox-criterion">');
            var element = jQuery(this);
            var id = element.attr("id");
            var value = element.val();
            var label = jQuery("label[for=" + id + "]", widget.widget);
            var title = label.attr("title");
            var count = label.children("span").text();

            var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
            link.attr("id", "criteria_" + id);
            link.attr("title", "Remove " + title + " filter");
            link.on("click", function () {
                widget.criteria_remove(value, element);
                return false;
            });

            span.append(link);
            jQuery('<span class="title">').text(title).appendTo(span);
            jQuery('<span class="count">').text(count).appendTo(span);
            html.append(span);
        });

        return html;
    },

    criteria_remove: function (value, element) {
        // Remove all
        if (!value) {
            this.element.each((_, e) => (e.checked = false));
        } else {
            element.each((_, e) => (e.checked = false));
        }
        this.do_query();
    },

    count: function (sortcountable) {
        var query = Faceted.SortedQuery();
        query.cid = this.wid;
        if (this.version) {
            query.version = this.version;
        }
        if (this.operator && !query[this.wid + "-operator"]) {
            query[this.wid + "-operator"] = this.operator;
        }

        var context = this;
        jQuery(Faceted.Events).trigger(Faceted.Events.AJAX_START, { wid: context.wid });
        jQuery.getJSON(Faceted.BASEURL + "@@faceted_counter", query, function (data) {
            context.count_update(data, sortcountable);
            jQuery(Faceted.Events).trigger(Faceted.Events.DO_UPDATE);
            jQuery(Faceted.Events).trigger(Faceted.Events.AJAX_STOP, {
                wid: context.wid,
            });
        });
    },

    count_update: function (data, sortcountable) {
        var context = this;
        var lis = jQuery("li", context.widget);
        jQuery(lis).each(function () {
            var li = jQuery(this);
            li.removeClass("faceted-checkbox-item-disabled");
            li.removeClass("faceted-checkbox-item-zerocount");
            var input = jQuery("input", li);
            input.unbind();
            var key = input.val();

            var span = jQuery("span", li);
            if (!span.length) {
                var label = jQuery("label", li);
                label.append(" ");
                label.append(jQuery("<span>"));
                span = jQuery("span", li);
            }

            var value = data[key];
            value = value ? value : 0;
            span.text("(" + data[key] + ")");
            if (sortcountable) {
                li.data("count", value);
            }
            if (!value) {
                li.addClass("faceted-checkbox-item-disabled");
                if (context.widget.hasClass("faceted-zero-count-hidden")) {
                    li.addClass("faceted-checkbox-item-zerocount");
                }
                input.attr("disabled", "disabled");
            } else {
                input.attr("disabled", false);
                input.on("click", function (evt) {
                    context.checkbox_click(this, evt);
                });
            }
        });
        if (sortcountable) {
            lis.detach().sort(function (x, y) {
                var a = jQuery(x).data("count");
                var b = jQuery(y).data("count");
                return b - a;
            });
        }
        jQuery("ul", context.widget).append(lis);
        // Update expand/colapse
        context.fieldset.trigger("widget-refresh");
    },
};

Faceted.initializeCheckboxesWidget = function () {
    jQuery("div.faceted-checkboxes-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.CheckboxesWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(Faceted.Events.INITIALIZE, Faceted.initializeCheckboxesWidget);


/***/ }),

/***/ 593:
/***/ (function() {

/* Criteria Widget
 */
Faceted.CriteriaWidget = function (wid) {
    this.wid = wid;
    this.widget = jQuery("#" + wid + "_widget");
    this.title = jQuery("legend", this.widget).html();

    this.area = jQuery("#" + wid);
    this.reset_button = jQuery("#" + wid + "_reset");
    this.toggle_button = jQuery(".faceted-criteria-hide-show", this.widget);
    this.toggle_button_count = jQuery(".faceted-criteria-count", this.toggle_button);

    var js_widget = this;
    this.reset_button.on("click", function (evt) {
        js_widget.reset_click(this, evt);
        return false;
    });

    var toggle_buttons = jQuery("a", this.toggle_button);
    toggle_buttons.on("click", function (evt) {
        js_widget.toggle_button_click(this, evt);
        return false;
    });

    // Syndication
    js_widget.initialize_syndication();

    // Bind events
    jQuery(Faceted.Events).on(Faceted.Events.AJAX_QUERY_START, function () {
        return js_widget.update();
    });

    jQuery(Faceted.Events).on(Faceted.Events.DO_UPDATE, function () {
        return js_widget.update();
    });

    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        return js_widget.update_syndication();
    });
};

Faceted.CriteriaWidget.prototype = {
    reset_click: function () {
        jQuery(Faceted.Events).trigger(Faceted.Events.RESET);
        this.do_query();
    },

    toggle_button_click: function () {
        this.area.toggle("blind");
        jQuery("a", this.toggle_button).toggle();
        this.toggle_button_count.toggle();
    },

    do_query: function (wid, value) {
        Faceted.Form.do_query(wid, value);
    },

    update: function () {
        var context = this;
        var empty = true;
        context.widget.fadeOut("fast", function () {
            context.area.empty();
            jQuery.each(Faceted.Query, function (key) {
                var widget = Faceted.Widgets[key];
                if (!widget) {
                    return;
                }
                var criteria = widget.criteria();
                jQuery.each(criteria, function () {
                    context.area.append(this);
                    empty = false;
                });
            });

            var count = jQuery("dd span", context.area).length;
            context.toggle_button_count.text("(" + count + ")");

            if (!empty) {
                context.widget.fadeIn("fast");
            }
        });
    },

    criteria: function () {
        return [];
    },

    initialize_syndication: function () {
        this.rss = null;
        this.rss_href = "";
        var icon = null;
        var rss = jQuery("#document-action-rss, #document-action-rss2").find("a");
        if (rss.length) {
            rss = jQuery(rss[0]).clone();
            icon = jQuery("img", rss);
            icon.attr("id", icon.attr("id") + "-" + this.wid);
            rss.addClass("faceted-criteria-syndication-rss");
            rss.attr("id", this.wid + "syndication-rss");
            jQuery(".faceted-criteria-reset", this.widget).prepend(rss);
            this.rss = jQuery("#" + this.wid + "syndication-rss", this.widget);
            this.rss_href = rss.attr("href");
        }
    },

    update_syndication: function () {
        var hash = "ajax=True&";
        hash += Faceted.URLHandler.document_hash();
        if (this.rss) {
            this.rss.attr("href", this.rss_href + "?" + hash);
        }
    },
};

Faceted.initializeCriteriaWidget = function () {
    jQuery("div.faceted-criteria-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.CriteriaWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(Faceted.Events.INITIALIZE, Faceted.initializeCriteriaWidget);


/***/ }),

/***/ 411:
/***/ (function() {

/* Relative Date Widget
 */
Faceted.DateWidget = function (wid) {
    var self = this;
    self.wid = wid;
    self.widget = jQuery("#" + wid + "_widget");
    self.widget.show();
    self.title = jQuery("legend", self.widget).html();
    self.select_from = jQuery("select[name=from]", self.widget);
    self.select_to = jQuery("select[name=to]", self.widget);

    self.selected = [];

    // Default value
    var from = self.select_from.val();
    var to = self.select_to.val();
    if (from !== "now-past" || to !== "now_future") {
        self.selected = [self.select_from, self.select_to];
        Faceted.Query[self.wid] = [from, to];
    }

    // Handle clicks
    jQuery("form", self.widget).on("submit", function () {
        return false;
    });

    // Bind events
    self.select_from.on("change", function () {
        self.change();
    });

    self.select_to.on("change", function () {
        self.change();
    });

    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        self.synchronize();
    });
    jQuery(Faceted.Events).on(Faceted.Events.RESET, function () {
        self.reset();
    });
};

Faceted.DateWidget.prototype = {
    change: function () {
        var from = this.select_from.val();
        var to = this.select_to.val();
        if (from === "now-past" && to === "now_future") {
            this.reset();
            Faceted.Form.do_query(this.wid, []);
        } else {
            this.do_query();
        }
    },

    do_query: function () {
        this.sync_ui();
        var value = [this.select_from.val(), this.select_to.val()];
        this.selected = [this.select_from, this.select_to];
        Faceted.Form.do_query(this.wid, value);
    },

    reset: function () {
        this.selected = [];
        this.select_from.val("now-past");
        this.select_to.val("now_future");
        this.widget.removeClass("faceted-widget-active");
        this.sync_ui();
    },

    sync_ui: function () {
        this.select_from.find("option").attr("disabled", false);
        this.select_to.find("option").attr("disabled", false);

        var found;
        found = false;
        var from_value = this.select_from.val();
        this.select_to.find("option").each(function () {
            jQuery(this).attr("disabled", true);
            if (!found && this.value === from_value) {
                found = true;
                return false;
            }
        });

        found = false;
        var to_value = this.select_to.val();
        this.select_from.find("option").each(function () {
            if (this.value === to_value) {
                found = true;
            }
            if (found) {
                jQuery(this).attr("disabled", true);
            }
        });
    },

    synchronize: function () {
        var q_value = Faceted.Query[this.wid];
        if (!q_value) {
            this.reset();
            return;
        }
        if (!q_value.length) {
            this.reset();
            return;
        }
        if (q_value.length < 2) {
            this.reset();
            return;
        }

        this.select_from.val(q_value[0]).trigger("change");
        this.select_to.val(q_value[1]).trigger("change");
        this.widget.addClass("faceted-widget-active");
    },

    criteria: function () {
        var html = [];
        var title = this.criteria_title();
        var body = this.criteria_body();
        if (title) {
            html.push(title);
        }
        if (body) {
            html.push(body);
        }
        return html;
    },

    criteria_title: function () {
        if (!this.selected.length) {
            return "";
        }

        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", "criteria_" + this.wid);
        link.attr("title", "Remove " + this.title + " filters");
        var widget = this;
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });

        var html = jQuery("<dt>");
        html.attr("id", "criteria_" + this.wid + "_label");
        html.append(link);
        html.append("<span>" + this.title + "</span>");
        return html;
    },

    criteria_body: function () {
        if (!this.selected.length) {
            return "";
        }

        var from = jQuery("option:selected", this.select_from).text();
        var to = jQuery("option:selected", this.select_to).text();
        var label = from + " - " + to;

        var widget = this;
        var html = jQuery("<dd>");
        html.attr("id", "criteria_" + this.wid + "_entries");
        var span = jQuery('<span class="faceted-date-criterion">');
        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');

        link.attr("id", "criteria_" + this.wid + "_");
        link.attr("title", "Remove " + label + " filter");
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });

        span.append(link);
        jQuery("<span>").text(label).appendTo(span);
        html.append(span);
        return html;
    },

    criteria_remove: function () {
        this.reset();
        return Faceted.Form.do_query(this.wid, []);
    },
};

Faceted.initializeDateWidget = function () {
    jQuery("div.faceted-date-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.DateWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(Faceted.Events.INITIALIZE, Faceted.initializeDateWidget);


/***/ }),

/***/ 56:
/***/ (function() {

/* DateRange Widget
 */
Faceted.DateRangeWidget = function (wid) {
    this.wid = wid;
    this.widget = jQuery("#" + wid + "_widget");
    this.widget.show();
    this.title = jQuery("legend", this.widget).html();

    this.start = jQuery("input[name=start]", this.widget);
    this.yearRange = jQuery("input[name=calYearRange]", this.widget).val();
    this.end = jQuery("input[name=end]", this.widget);
    this.selected = [];
    this.usePloneFormat = jQuery("input[name=usePloneFormat]", this.widget).val();
    this.usePloneFormat = this.usePloneFormat == "True" ? true : false;
    this.dateFormat = jQuery("input[name=dateFormat]", this.widget).val();
    this.language = jQuery("input[name=language]", this.widget).val() || "en";

    var start = this.start.val();
    var end = this.end.val();
    if (start && end) {
        this.selected = [this.start, this.end];
        Faceted.Query[this.wid] = [start, end];
    }

    var js_widget = this;
    this.start.datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: this.dateFormat,
        yearRange: this.yearRange,
        onSelect: function () {
            js_widget.force_start_range();
            js_widget.select_change(js_widget.start);
        },
    });

    this.end.datepicker({
        changeMonth: true,
        changeYear: true,
        yearRange: this.yearRange,
        dateFormat: this.dateFormat,
        onSelect: function () {
            js_widget.force_end_range();
            js_widget.select_change(js_widget.end);
        },
    });

    if (start) {
        js_widget.force_start_range();
    }
    if (end) {
        js_widget.force_end_range();
    }

    /**
     * Make sure we can reset the date range by manually deleting the start and
     * end value of the date range and call the 'onChange' event (click outside
     * the changed field).
     */
    this.start.on("change", function () {
        var start = js_widget.start.val();
        var end = js_widget.end.val();

        if (!start && !end) {
            js_widget.reset();
            Faceted.Form.do_query(js_widget.wid, []);
        }
    });
    this.end.on("change", function () {
        var start = js_widget.start.val();
        var end = js_widget.end.val();

        if (!start && !end) {
            js_widget.reset();
            Faceted.Form.do_query(js_widget.wid, []);
        }
    });

    // Handle clicks
    jQuery("form", this.widget).on("submit", function () {
        return false;
    });

    // Bind events
    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        js_widget.synchronize();
    });
    jQuery(Faceted.Events).on(Faceted.Events.RESET, function () {
        js_widget.reset();
    });
};
Faceted.DateRangeErrorMsg = "Invalid date range";
Faceted.DateRangeWidget.prototype = {
    select_change: function (element) {
        this.do_query(element);
    },

    force_start_range: function () {
        var start_date = this.start.datepicker("getDate");
        if (start_date) {
            this.end.datepicker("option", "minDate", start_date);
        }
    },

    force_end_range: function () {
        var end_date = this.end.datepicker("getDate");
        if (end_date) {
            this.start.datepicker("option", "maxDate", end_date);
        }
    },

    do_query: function () {
        var start = this.start.val();
        var end = this.end.val();

        /**
         * Make sure we can reset the date range by manually deleting the start and
         * end value of the date range and running the query (press enter).
         */
        if (!start && !end) {
            this.reset();
            Faceted.Form.do_query(this.wid, []);
        }

        if (!start || !end) {
            this.selected = [];
            return false;
        }

        var value = [start, end];
        var start_date;
        var end_date;
        if (this.usePloneFormat) {
            start_date = jQuery.datepicker.parseDate(this.dateFormat, start);
            end_date = jQuery.datepicker.parseDate(this.dateFormat, end);
        } else {
            start_date = new Date(start.replace(/-/g, "/"));
            end_date = new Date(end.replace(/-/g, "/"));
        }

        if (end_date < start_date) {
            Faceted.Form.raise_error(
                Faceted.DateRangeErrorMsg,
                this.wid + "_errors",
                []
            );
        } else {
            this.selected = [this.start, this.end];
            Faceted.Form.clear_errors(this.wid + "_errors", []);
            Faceted.Form.do_query(this.wid, value);
        }
    },

    reset: function () {
        this.selected = [];
        this.start.val("");
        this.end.val("");
        this.widget.removeClass("faceted-widget-active");
        this.start.datepicker("option", "maxDate", null);
        this.end.datepicker("option", "minDate", null);
    },

    synchronize: function () {
        var value = Faceted.Query[this.wid];
        if (!value) {
            this.reset();
            return false;
        }
        if (!value.length) {
            this.reset();
            return false;
        }
        if (value.length < 2) {
            this.reset();
            return false;
        }

        var start = value[0];
        var end = value[1];
        var start_date;
        var end_date;
        if (this.usePloneFormat) {
            start_date = jQuery.datepicker.parseDate(this.dateFormat, start);
            end_date = jQuery.datepicker.parseDate(this.dateFormat, end);
        } else {
            start_date = new Date(start.replace(/-/g, "/"));
            end_date = new Date(end.replace(/-/g, "/"));
        }

        // Invalid date
        if (!start_date.getFullYear()) {
            this.reset();
            return false;
        }
        if (!end_date.getFullYear()) {
            this.reset();
            return false;
        }

        // Set start, end inputs
        this.start.val(start);
        this.end.val(end);
        this.selected = [this.start, this.end];
        this.widget.addClass("faceted-widget-active");
    },

    criteria: function () {
        var html = [];
        var title = this.criteria_title();
        var body = this.criteria_body();
        if (title) {
            html.push(title);
        }
        if (body) {
            html.push(body);
        }
        return html;
    },

    criteria_title: function () {
        if (!this.selected.length) {
            return "";
        }

        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", "criteria_" + this.wid);
        link.attr("title", "Remove " + this.title + " filters");
        var widget = this;
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });

        var html = jQuery("<dt>");
        html.attr("id", "criteria_" + this.wid + "_label");
        html.append(link);
        html.append("<span>" + this.title + "</span>");
        return html;
    },

    criteria_body: function () {
        if (!this.selected.length) {
            return "";
        }

        var widget = this;
        var html = jQuery("<dd>");
        html.attr("id", "criteria_" + this.wid + "_entries");
        var start = this.start.val();
        var end = this.end.val();
        var start_date;
        var end_date;
        if (this.usePloneFormat) {
            start_date = jQuery.datepicker.parseDate(this.dateFormat, start);
            end_date = jQuery.datepicker.parseDate(this.dateFormat, end);
        } else {
            start_date = new Date(start.replace(/-/g, "/"));
            end_date = new Date(end.replace(/-/g, "/"));
        }

        var label = this.criteria_label(start_date, end_date);
        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');

        link.attr("id", "criteria_" + this.wid + "_");
        link.attr("title", "Remove " + label + " filter");
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });
        var span = jQuery('<span class="faceted-daterange-criterion">');
        span.append(link);
        jQuery("<span>").text(label).appendTo(span);
        html.append(span);
        return html;
    },

    criteria_label: function (start_date, end_date) {
        if (this.usePloneFormat) {
            var options = {
                weekday: "short",
                year: "numeric",
                month: "short",
                day: "numeric",
            };
            var start_date_label = start_date.toLocaleDateString(this.language, options);
            var end_date_label = end_date.toLocaleDateString(this.language, options);
            return start_date_label + " - " + end_date_label;
        } else {
            return start_date.toDateString() + " - " + end_date.toDateString();
        }
    },

    criteria_remove: function () {
        this.reset();
        return Faceted.Form.do_query(this.wid, []);
    },
};

Faceted.initializeDateRangeWidget = function () {
    jQuery("div.faceted-daterange-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.DateRangeWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(Faceted.Events.INITIALIZE, Faceted.initializeDateRangeWidget);


/***/ }),

/***/ 81:
/***/ (function() {

/* Debug Widget
 */
Faceted.DebugWidget = function (wid) {
    this.wid = wid;
    this.widget = jQuery("#" + wid + "_widget");
    this.widget.show();
    this.title = jQuery("legend", this.widget).html();
    this.query_area = jQuery("dd.debug-query pre", this.widget);
    this.after_area = jQuery("dd.debug-after pre", this.widget);
    this.config_area = jQuery("dd.debug-config pre", this.widget);
    this.count_area = jQuery("dd.debug-count pre", this.widget);

    jQuery("dd", this.widget).hide();
    jQuery("dt", this.widget).each(function () {
        var dt = jQuery(this);
        var css = dt.attr("class");
        var parent = dt.parent("dl");
        var minmax = jQuery("<span>").addClass("ui-icon ui-icon-plus");
        minmax.on("click", function () {
            var button = jQuery(this);
            jQuery("dd." + css, parent).toggle();
            if (button.hasClass("ui-icon-minus")) {
                button.removeClass("ui-icon-minus");
                button.addClass("ui-icon-plus");
            } else {
                button.removeClass("ui-icon-plus");
                button.addClass("ui-icon-minus");
            }
        });
        dt.prepend(minmax);
    });

    // Bind events
    var js_widget = this;
    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        js_widget.synchronize();
    });
};

Faceted.DebugWidget.prototype = {
    synchronize: function () {
        var context = this;
        var query = jQuery.extend({}, Faceted.Query);
        query["debugger"] = this.wid;
        jQuery.get(
            Faceted.BASEURL + "@@faceted.widget.debug.query",
            query,
            function (data) {
                if (data == "[]") {
                    jQuery(".debug-query", context.widget).hide();
                } else {
                    jQuery("dt.debug-query", context.widget).show();
                }
                context.query_area.text(data);
            }
        );
        jQuery.get(
            Faceted.BASEURL + "@@faceted.widget.debug.after",
            query,
            function (data) {
                if (data == "[]") {
                    jQuery(".debug-after", context.widget).hide();
                } else {
                    jQuery("dt.debug-after", context.widget).show();
                }
                context.after_area.text(data);
            }
        );
        jQuery.get(
            Faceted.BASEURL + "@@faceted.widget.debug.criteria",
            query,
            function (data) {
                if (data == "[]") {
                    jQuery(".debug-config", context.widget).hide();
                } else {
                    jQuery("dt.debug-config", context.widget).show();
                }
                context.config_area.text(data);
            }
        );
        jQuery.get(
            Faceted.BASEURL + "@@faceted.widget.debug.counters",
            query,
            function (data) {
                if (data == "[]") {
                    jQuery(".debug-count", context.widget).hide();
                } else {
                    jQuery("dt.debug-count", context.widget).show();
                }
                context.count_area.text(data);
            }
        );
    },

    criteria: function () {
        return [];
    },
};

Faceted.initializeDebugWidget = function () {
    jQuery("div.faceted-debug-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.DebugWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(Faceted.Events.INITIALIZE, Faceted.initializeDebugWidget);


/***/ }),

/***/ 489:
/***/ (function() {

/* Select Widget
 */
Faceted.MultiSelectWidget = function (wid) {
    var self = this;
    this.wid = wid;
    this.widget = jQuery("#" + this.wid + "_widget");
    this.widget.show();
    this.title = this.widget.find("legend").html();
    this.elements = this.widget.find("option");
    this.select = jQuery("#" + this.wid);
    this.multiple = this.select.attr("multiple") ? true : false;
    this.placeholder = this.widget.data("placeholder");
    this.closeOnSelect = this.widget.data("closeonselect");
    this.ajax = this.widget.data("ajax");
    this.selected = [];

    if (!this.ajax) {
        this.select.select2({
            placeholder: this.placeholder,
            closeOnSelect: this.closeOnSelect,
            allowClear: true,
        });
    } else {
        this.select.select2({
            placeholder: this.placeholder,
            closeOnSelect: this.closeOnSelect,
            allowClear: true,
            multiple: this.multiple,
            ajax: {
                url: self.ajax,
                dataType: "json",
                data: function (term) {
                    var query = {
                        q: term,
                    };
                    return query;
                },
                results: function (data) {
                    return {
                        results: data.items,
                    };
                },
            },
            initSelection: function (element, callback) {
                var id = jQuery(element).val();
                if (id !== "") {
                    jQuery
                        .ajax(self.ajax + "?wildcard:int=0&q=" + id, {
                            dataType: "json",
                        })
                        .done(function (data) {
                            if (self.multiple) {
                                callback(data.items);
                            } else if (data.items.length) {
                                callback(data.items[0]);
                            }
                        });
                }
            },
        });
    }

    // Faceted operator
    this.operatorElem = this.widget.find(".faceted-operator a");
    this.operatorVisible = this.operatorElem.length ? true : false;

    if (this.operatorVisible) {
        this.operator = this.operatorElem.data("value");

        // Handle operator click
        this.operatorElem.on("click", function (evt) {
            evt.preventDefault();
            self.operator_click(this, evt);
        });

        // Update text
        this.operatorElem.text(this.operatorElem.data(this.operator));
    } else {
        this.operator = this.widget.data("operator");
    }

    // Faceted version
    this.version = "";
    var version = jQuery("#faceted-version");
    if (version) {
        this.version = version.text();
    }

    // Handle change
    jQuery("form", this.widget).on("submit", function () {
        return false;
    });

    this.select.on("select2-close", function (evt) {
        self.select_change(this, evt);
    });

    this.select.on("select2-removed", function (evt) {
        self.select_change(this, evt);
    });

    // Default value
    var value = this.select.val();
    if (value) {
        if (this.ajax) {
            this.selected = this.multiple
                ? this.widget.find('input[type="hidden"]')
                : this.widget.find('input[type="text"]');
        } else {
            this.selected = this.widget.find("option:selected");
        }
        if (this.multiple) {
            Faceted.Query[this.wid] = value;
        } else {
            Faceted.Query[this.wid] = [value];
        }
    }

    if (this.operatorVisible) {
        Faceted.Query[self.wid + "-operator"] = self.operator;
    }

    // Bind events
    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        self.synchronize();
    });
    jQuery(Faceted.Events).on(Faceted.Events.RESET, function () {
        self.reset();
    });
    if (this.widget.hasClass("faceted-count")) {
        var sortcountable = this.widget.hasClass("faceted-sortcountable");
        jQuery(Faceted.Events).on(Faceted.Events.QUERY_INITIALIZED, function () {
            self.count(sortcountable);
        });
        jQuery(Faceted.Events).on(Faceted.Events.FORM_DO_QUERY, function (evt, data) {
            if (
                self.operator != "and" &&
                (data.wid == self.wid || data.wid == "b_start")
            ) {
                return;
            }
            self.count(sortcountable);
        });
    }
};

Faceted.MultiSelectWidget.prototype = {
    select_change: function (element) {
        if (!jQuery(element).val()) {
            element = null;
        }
        this.do_query(element);
    },

    operator_click: function () {
        var self = this;
        if (self.operator === "or") {
            self.operator = "and";
            self.operatorElem.text(self.operatorElem.data("and"));
        } else {
            self.operator = "or";
            self.operatorElem.text(self.operatorElem.data("or"));
        }
        Faceted.Form.do_query(this.wid + "-operator", self.operator);
    },

    operator_label: function () {
        if (!this.operatorVisible) {
            return "";
        }

        var label = this.widget.find(".faceted-operator label");
        label = label.length ? label.text() : "";
        label += " " + this.operatorElem.data(this.operator);

        return "(" + label + ")";
    },

    do_query: function (element) {
        if (!element) {
            this.selected = [];
            return Faceted.Form.do_query(this.wid, []);
        } else {
            var value = jQuery(element).val();
            if (this.ajax) {
                this.selected = this.multiple
                    ? this.widget.find('input[type="hidden"]')
                    : this.widget.find('input[type="text"]');
            } else {
                this.selected = this.widget.find("option:selected");
            }
            return Faceted.Form.do_query(this.wid, value);
        }
    },

    reset: function () {
        this.select.val(null).trigger("change.select2");
        this.selected = [];
        this.widget.removeClass("faceted-widget-active");
    },

    synchronize: function () {
        var value = Faceted.Query[this.wid];
        if (value) {
            this.select.val(value).trigger("change.select2");
            if (this.ajax) {
                this.selected = this.multiple
                    ? this.widget.find('input[type="hidden"]')
                    : this.widget.find('input[type="text"]');
            } else {
                this.selected = this.widget.find("option:selected");
            }
            this.widget.addClass("faceted-widget-active");
        } else {
            this.reset();
        }

        var operator = Faceted.Query[this.wid + "-operator"];
        if (this.operatorVisible && operator) {
            operator = operator[0];
            this.operator = operator;
            this.operatorElem.data("value", operator);
            this.operatorElem.text(this.operatorElem.data(this.operator));
        }
    },

    criteria: function () {
        var html = [];
        var title = this.criteria_title();
        var body = this.criteria_body();
        if (title) {
            html.push(title);
        }
        if (body) {
            html.push(body);
        }
        return html;
    },

    criteria_title: function () {
        if (!this.selected.length) {
            return "";
        }

        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", "criteria_" + this.wid);
        link.attr("title", "Remove " + this.title + " filters");
        var widget = this;
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });

        var html = jQuery("<dt>");
        html.attr("id", "criteria_" + this.wid + "_label");
        html.append(link);
        html.append("<span>" + this.title + "</span>");
        return html;
    },

    criteria_body: function () {
        if (!this.selected.length) {
            return "";
        }

        var widget = this;
        var html = jQuery("<dd>");
        html.attr("id", "criteria_" + this.wid + "_entries");

        widget.selected.each(function () {
            var span = jQuery('<span class="faceted-multiselect-criterion">');
            var element = jQuery(this);
            var id = element.attr("id");
            var value = element.val();
            var to_remove = value;
            if (!value) {
                value = element.parent().find("a").text();
                to_remove = null;
            }
            var label = element.attr("title") || value;

            var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
            link.attr("id", "criteria_" + id);
            link.attr("title", "Remove " + label + " filter");
            link.on("click", function () {
                widget.criteria_remove(to_remove, element);
                return false;
            });

            span.append(link);
            jQuery("<span>").text(label).appendTo(span);
            html.append(span);
        });

        return html;
    },

    criteria_remove: function (value, element) {
        // Remove all
        if (!value) {
            this.select.val(null).trigger("change.select2");
            this.do_query();
        } else {
            element.attr("selected", false);
            this.select.trigger("change.select2");
            this.do_query(this.select);
        }
    },

    count: function (sortcountable) {
        var query = Faceted.SortedQuery();
        query.cid = this.wid;
        if (this.version) {
            query.version = this.version;
        }
        if (this.operator && !query[this.wid + "-operator"]) {
            query[this.wid + "-operator"] = this.operator;
        }

        var context = this;
        jQuery(Faceted.Events).trigger(Faceted.Events.AJAX_START, { wid: context.wid });
        jQuery.getJSON(Faceted.BASEURL + "@@faceted_counter", query, function (data) {
            context.count_update(data, sortcountable);
            jQuery(Faceted.Events).trigger(Faceted.Events.DO_UPDATE);
            jQuery(Faceted.Events).trigger(Faceted.Events.AJAX_STOP, {
                wid: context.wid,
            });
        });
    },

    count_update: function (data, sortcountable) {
        var context = this;
        var select = jQuery("select", context.widget);
        var options = jQuery("option", context.widget);
        var current_val = select.val();
        jQuery(options).each(function () {
            var option = jQuery(this);
            if (!option.attr("title")) {
                return;
            }
            option.removeClass("faceted-select-item-disabled");
            option.attr("disabled", false);
            var key = option.val();

            var value = data[key];
            value = value ? value : 0;
            var option_txt = option.attr("title");
            option_txt += " (" + value + ")";

            option.html(option_txt);
            if (sortcountable) {
                option.data("count", value);
            }
            if (!value) {
                option.attr("disabled", "disabled");
                option.addClass("faceted-select-item-disabled");
            }
        });
        if (sortcountable) {
            options.detach().sort(function (x, y) {
                var a = jQuery(x).data("count");
                var b = jQuery(y).data("count");
                return b - a;
            });
            select.append(options);
            select.val(current_val);
        }
    },
};

Faceted.initializeMultiSelectWidget = function () {
    jQuery("div.faceted-multiselect-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.MultiSelectWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(
    Faceted.Events.INITIALIZE,
    Faceted.initializeMultiSelectWidget
);


/***/ }),

/***/ 256:
/***/ (function() {

var FacetedTree = (window.FacetedTree = { version: "15.0" });

FacetedTree.Events = {};
FacetedTree.Events.CHANGED = "FACETEDTREE-CHANGED";
FacetedTree.Events.AJAX_START = "FACETEDTREE-AJAX-START";
FacetedTree.Events.AJAX_STOP = "FACETEDTREE-AJAX-STOP";

FacetedTree.JsTree = function (wid, container, mode) {
    var self = this;
    self.BASEURL = "";
    if (window.FacetedEdit) {
        self.BASEURL = FacetedEdit.BASEURL;
    } else if (window.Faceted) {
        self.BASEURL = Faceted.BASEURL;
    }
    self.wid = wid;
    self.mode = mode || "view";
    self.input = jQuery(container).find(`#${wid}`);
    self.input.attr("readonly", "readonly");

    self.area = jQuery("<div>")
        .attr("id", `${wid}-tree`)
        .addClass("tree")
        .text("Loading...")
        .width(self.input.width())
        .hide();
    self.input.after(self.area);

    self.input.on("click", function () {
        self.show();
    });

    jQuery(document).on("click", function (e) {
        var target = jQuery(e.target);
        if (target.is(`#${self.input.attr("id")}`)) {
            return;
        }
        var parent = target.parents(`#${self.area.attr("id")}`);
        if (parent.length) {
            return;
        }
        self.hide();
    });

    jQuery(document).on("keydown", function (e) {
        if (e.keyCode == 27) {
            self.hide();
        }
    });

    self.initialize();
};

FacetedTree.JsTree.prototype = {
    initialize: function () {
        var self = this;
        self.area
            .jstree({
                plugins: ["wholerow"],
                core: {
                    themes: {
                        name: "proton",
                        responsive: true,
                        variant: "large",
                    },
                    data: {
                        url: function (node) {
                            if (node.id === "#") {
                                return `${self.BASEURL}@@faceted.path.tree.json?cid=${self.wid}&mode=${self.mode}`;
                            }
                            return `${self.BASEURL}@@faceted.path.tree.json?cid=${self.wid}&mode=${self.mode}&path=${node.data.path}`;
                        },
                        dataType: "json",
                    },
                },
            })
            .on("changed.jstree", function (e, data) {
                self.change(data.node);
            });
    },

    show: function () {
        this.area.show();
    },

    hide: function () {
        this.area.hide();
    },

    change: function (node) {
        this.hide();
        var value = node.data.path;
        if (this.input.val() == value) {
            value = "";
        }
        this.input.val(value);
        jQuery(FacetedTree.Events).trigger(FacetedTree.Events.CHANGED, { path: value });
    },
};


/***/ }),

/***/ 763:
/***/ (function() {

/* Path Widget
 */
Faceted.PathWidget = function (wid) {
    var self = this;
    self.wid = wid;
    self.widget = jQuery(`#${wid}_widget`);
    self.widget.show();
    self.title = jQuery("legend", self.widget).html();
    self.input = jQuery("input", self.widget);
    self.breadcrumbs = jQuery("<dd>");
    self.selected = [];

    // Default value
    var value = self.input.val();
    if (value) {
        self.selected = self.input;
        Faceted.Query[self.wid] = [value];
    }

    // Navigation Tree
    self.tree = new FacetedTree.JsTree(self.wid, self.widget);

    // Bind events
    jQuery("form", self.widget).on("submit", function () {
        return false;
    });
    jQuery(FacetedTree.Events).on(FacetedTree.Events.CHANGED, function () {
        self.text_change(self.input);
    });
    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        self.synchronize();
    });
    jQuery(Faceted.Events).on(Faceted.Events.RESET, function () {
        self.reset();
    });
};

Faceted.PathWidget.prototype = {
    text_change: function (element) {
        this.do_query(element);
    },

    do_query: function (element) {
        var value = this.input.val();
        value = value ? [value] : [];

        if (!element) {
            this.selected = [];
            return Faceted.Form.do_query(this.wid, []);
        }
        this.selected = [this.input];
        return Faceted.Form.do_query(this.wid, value);
    },

    reset: function () {
        this.selected = [];
        this.widget.removeClass("faceted-widget-active");
        this.input.val("");
    },

    synchronize: function () {
        var value = Faceted.Query[this.wid];
        if (!value) {
            this.reset();
            return;
        }
        this.input.val(value);
        this.selected = [this.input];
        this.widget.addClass("faceted-widget-active");
    },

    criteria: function () {
        var html = [];
        var title = this.criteria_title();
        var body = this.criteria_body();
        if (title) {
            html.push(title);
        }
        if (body) {
            html.push(body);
        }
        return html;
    },

    criteria_title: function () {
        if (!this.selected.length) {
            return "";
        }
        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", `criteria_${this.wid}`);
        link.attr("title", `Remove ${this.title} filters`);
        var widget = this;
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });

        var html = jQuery("<dt>");
        html.attr("id", `criteria_${this.wid}_label`);
        html.append(link);
        html.append(`<span>${this.title}</span>`);
        return html;
    },

    criteria_body: function () {
        if (!this.selected.length) {
            return "";
        }

        var self = this;
        self.breadcrumbs.text("Loading...");
        var query = {};
        query.path = self.input.val();
        query.cid = self.wid;
        jQuery.getJSON(
            `${Faceted.BASEURL}@@faceted.path.breadcrumbs.json`,
            query,
            function (data) {
                self.breadcrumbs.empty();
                jQuery.each(data, function () {
                    self.breadcrumbs.append(jQuery("<span>").html("&raquo;"));
                    var a = jQuery("<a>")
                        .attr("href", this.url)
                        .attr("title", this.title)
                        .text(this.title)
                        .on("click", function () {
                            var path = jQuery(this).attr("href");
                            self.input.val(path);
                            jQuery(FacetedTree.Events).trigger(
                                FacetedTree.Events.CHANGED,
                                { path: path }
                            );
                            return false;
                        });
                    self.breadcrumbs.append(a);
                });
            }
        );
        return self.breadcrumbs;
    },

    criteria_remove: function () {
        this.selected = [];
        this.input.val("");
        this.do_query();
    },
};

Faceted.initializePathWidget = function () {
    jQuery("div.faceted-path-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.PathWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(Faceted.Events.INITIALIZE, Faceted.initializePathWidget);


/***/ }),

/***/ 305:
/***/ (function() {

Faceted.PortletWidget = function (wid) {
    this.wid = wid;
    this.widget = jQuery("#" + wid + "_widget");
    this.widget.show();

    jQuery("legend", this.widget).hide();
    jQuery("fieldset", this.widget).css("border", "none");

    jQuery("form", this.widget).on("submit", function () {
        return true;
    });
};

Faceted.initializePortletWidget = function () {
    jQuery("div.faceted-portlet-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.PortletWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(Faceted.Events.INITIALIZE, Faceted.initializePortletWidget);


/***/ }),

/***/ 886:
/***/ (function() {

/* Radio Widget
 */
Faceted.RadioWidget = function (wid) {
    this.wid = wid;
    this.widget = jQuery("#" + wid + "_widget");
    this.widget.show();
    this.fieldset = jQuery(".widget-fieldset", this.widget);
    this.title = jQuery("legend", this.widget).html();
    this.elements = jQuery("input[type=radio]", this.widget);
    this.maxitems = parseInt(jQuery("span", this.widget).text(), 10);
    this.selected = [];

    // Faceted version
    this.version = "";
    var version = jQuery("#faceted-version");
    if (version) {
        this.version = version.text();
    }

    jQuery("form", this.widget).on("submit", function () {
        return false;
    });

    var js_widget = this;
    this.elements.on("click", function (evt) {
        js_widget.radio_click(this, evt);
    });

    // Default value
    var selected = jQuery("input[type=radio]:checked", this.widget);
    if (selected.length) {
        this.selected = selected;
        Faceted.Query[this.wid] = [this.selected.val()];
    }

    // Bind events
    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        js_widget.synchronize();
    });
    jQuery(Faceted.Events).on(Faceted.Events.RESET, function () {
        js_widget.reset();
    });
    if (this.widget.hasClass("faceted-count")) {
        var sortcountable = this.widget.hasClass("faceted-sortcountable");
        jQuery(Faceted.Events).on(Faceted.Events.QUERY_INITIALIZED, function () {
            js_widget.count(sortcountable);
        });
        jQuery(Faceted.Events).on(Faceted.Events.FORM_DO_QUERY, function (evt, data) {
            if (data.wid == js_widget.wid || data.wid == "b_start") {
                return;
            }
            js_widget.count(sortcountable);
        });
    }

    if (this.maxitems) {
        this.fieldset.collapsible({
            maxitems: this.maxitems,
            elements: "li:not(.faceted-radio-item-zerocount)",
            more: this.widget.data("more"),
            less: this.widget.data("less"),
        });
    }
};

Faceted.RadioWidget.prototype = {
    radio_click: function (element) {
        if (!jQuery(element).val()) {
            element = null;
        }
        this.do_query(element);
    },

    do_query: function (element) {
        if (!element) {
            this.selected = [];
            return Faceted.Form.do_query(this.wid, []);
        } else {
            this.selected = [element];
            var value = jQuery(this.selected[0]).val();
            return Faceted.Form.do_query(this.wid, value);
        }
    },

    reset: function () {
        jQuery(this.elements[0]).prop("checked", true);
        this.selected = [];
        this.widget.removeClass("faceted-widget-active");
    },

    synchronize: function () {
        var value = Faceted.Query[this.wid];
        if (!value) {
            this.reset();
            return;
        }

        var context = this;
        if (typeof value != "object") {
            value = [value];
        }
        jQuery.each(value, function () {
            var radio = jQuery(
                "#" + context.wid + '_widget input[type=radio][value="' + this + '"]'
            );
            if (!radio.length) {
                context.reset();
            } else {
                context.selected = radio;
                context.selected.prop("checked", true);
                context.widget.addClass("faceted-widget-active");
            }
        });
    },

    criteria: function () {
        var html = [];
        var title = this.criteria_title();
        var body = this.criteria_body();
        if (title) {
            html.push(title);
        }
        if (body) {
            html.push(body);
        }
        return html;
    },

    criteria_title: function () {
        if (!this.selected.length) {
            return "";
        }
        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", "criteria_" + this.wid);
        link.attr("title", "Remove " + this.title + " filters");
        var widget = this;
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });

        var html = jQuery("<dt>");
        html.attr("id", "criteria_" + this.wid + "_label");
        html.append(link);
        html.append("<span>" + this.title + "</span>");
        return html;
    },

    criteria_body: function () {
        if (!this.selected.length) {
            return "";
        }

        var widget = this;
        var html = jQuery("<dd>");
        html.attr("id", "criteria_" + this.wid + "_entries");
        var element = jQuery(this.selected);
        var id = element.attr("id");
        var label = jQuery("label[for=" + id + "]", widget.widget);
        var title = label.attr("title");
        label = label.text();
        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        var span = jQuery('<span class="faceted-radio-criterion">');
        link.attr("id", "criteria_" + id);
        link.attr("title", "Remove " + title + " filter");
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });
        span.append(link);
        jQuery("<span>").text(label).appendTo(span);
        html.append(span);
        return html;
    },

    criteria_remove: function () {
        var element = jQuery(this.elements[0]);
        element.prop("checked", true);
        this.do_query();
    },

    count: function (sortcountable) {
        var query = Faceted.SortedQuery();
        query.cid = this.wid;
        if (this.version) {
            query.version = this.version;
        }

        var context = this;
        jQuery(Faceted.Events).trigger(Faceted.Events.AJAX_START, { wid: context.wid });
        jQuery.getJSON(Faceted.BASEURL + "@@faceted_counter", query, function (data) {
            context.count_update(data, sortcountable);
            jQuery(Faceted.Events).trigger(Faceted.Events.DO_UPDATE);
            jQuery(Faceted.Events).trigger(Faceted.Events.AJAX_STOP, {
                wid: context.wid,
            });
        });
    },

    count_update: function (data, sortcountable) {
        var context = this;
        var lis = jQuery("li", context.widget);
        jQuery(lis).each(function () {
            var li = jQuery(this);
            li.removeClass("faceted-radio-item-disabled");
            li.removeClass("faceted-radio-item-zerocount");
            var input = jQuery("input", li);
            input.unbind();
            var key = input.val();

            var span = jQuery("span", li);
            if (!span.length) {
                var label = jQuery("label", li);
                label.append(" ");
                label.append(jQuery("<span>"));
                span = jQuery("span", li);
            }

            var value = data[key];
            value = value ? value : 0;
            span.text("(" + value + ")");

            if (sortcountable) {
                li.data("count", value);
            }

            if (!value) {
                li.addClass("faceted-radio-item-disabled");
                if (context.widget.hasClass("faceted-zero-count-hidden")) {
                    li.addClass("faceted-radio-item-zerocount");
                }
                input.prop("disabled", "disabled");
            } else {
                input.prop("disabled", false);
                input.on("click", function (evt) {
                    context.radio_click(this, evt);
                });
            }
        });
        if (sortcountable) {
            lis.detach().sort(function (x, y) {
                var a = jQuery(x).data("count");
                var b = jQuery(y).data("count");
                return b - a;
            });
        }
        jQuery("ul", context.widget).append(lis);
        // Update expand/colapse
        context.fieldset.trigger("widget-refresh");
    },
};

Faceted.initializeRadioWidget = function () {
    jQuery("div.faceted-radio-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.RadioWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(Faceted.Events.INITIALIZE, Faceted.initializeRadioWidget);


/***/ }),

/***/ 143:
/***/ (function() {

/* Range Widget
 */

Faceted.RangeWidget = function (wid) {
    var js_widget = this;
    this.wid = wid;
    this.widget = jQuery("#" + wid + "_widget");
    this.widget.show();
    this.title = jQuery("legend", this.widget).html();

    this.start = jQuery("input[name=start]", this.widget);
    this.end = jQuery("input[name=end]", this.widget);
    this.selected = [];

    this.invalidRangeMsg = this.widget.data("invalid-range-msg");

    var start = this.start.val();
    var end = this.end.val();
    if (start && end) {
        this.selected = [this.start, this.end];
        Faceted.Query[this.wid] = [start, end];
    }

    // Handle clicks
    jQuery("form", this.widget).on("submit", function () {
        return false;
    });
    var handle = function (evt) {
        js_widget.select_change(this, evt);
    };
    this.start.on("change", handle);
    this.end.on("change", handle);

    // Bind events
    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        js_widget.synchronize();
    });
    jQuery(Faceted.Events).on(Faceted.Events.RESET, function () {
        js_widget.reset();
    });
};

Faceted.RangeWidget.prototype = {
    select_change: function (element) {
        this.do_query(element);
    },

    do_query: function () {
        var start = this.start.val();
        start = parseFloat(start) || start;
        var end = this.end.val();
        end = parseFloat(end) || end;

        if (!start || !end) {
            this.selected = [];
            return false;
        }

        var value = [this.start.val(), this.end.val()];

        if (end < start) {
            Faceted.Form.raise_error(this.invalidRangeMsg, this.wid + "_errors", []);
        } else {
            this.selected = [this.start, this.end];
            Faceted.Form.clear_errors(this.wid + "_errors", []);
            Faceted.Form.do_query(this.wid, value);
        }
    },

    reset: function () {
        this.selected = [];
        this.widget.removeClass("faceted-widget-active");
        this.start.val("");
        this.end.val("");
    },

    synchronize: function () {
        var value = Faceted.Query[this.wid];
        if (!value) {
            this.reset();
            return false;
        }
        if (!value.length) {
            this.reset();
            return false;
        }
        if (value.length < 2) {
            this.reset();
            return false;
        }

        var start = value[0];
        var end = value[1];

        // Set start, end inputs
        this.start.val(start);
        this.end.val(end);
        this.selected = [this.start, this.end];
        this.widget.addClass("faceted-widget-active");
    },

    criteria: function () {
        var html = [];
        var title = this.criteria_title();
        var body = this.criteria_body();
        if (title) {
            html.push(title);
        }
        if (body) {
            html.push(body);
        }
        return html;
    },

    criteria_title: function () {
        if (!this.selected.length) {
            return "";
        }

        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", "criteria_" + this.wid);
        link.attr("title", "Remove " + this.title + " filters");
        var widget = this;
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });

        var html = jQuery("<dt>");
        html.append(link);
        html.append("<span>" + this.title + "</span>");
        return html;
    },

    criteria_body: function () {
        if (!this.selected.length) {
            return "";
        }

        var widget = this;
        var html = jQuery("<dd>");
        var span = jQuery('<span class="faceted-range-criterion">');
        var start = this.start.val();
        var end = this.end.val();

        var label = start + " - " + end;
        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');

        link.attr("id", "criteria_" + this.wid + "_");
        link.attr("title", "Remove " + label + " filter");
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });
        span.append(link);
        jQuery("<span>").text(label).appendTo(span);
        html.append(span);
        return html;
    },

    criteria_remove: function () {
        this.reset();
        return Faceted.Form.do_query(this.wid, []);
    },
};

Faceted.initializeRangeWidget = function () {
    jQuery("div.faceted-range-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.RangeWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(Faceted.Events.INITIALIZE, Faceted.initializeRangeWidget);


/***/ }),

/***/ 710:
/***/ (function() {

Faceted.ResultsPerPageWidget = function (wid) {
    this.wid = wid;
    this.widget = jQuery("#" + this.wid + "_widget");
    this.widget.show();
    this.title = jQuery("legend", this.widget).html();
    this.elements = jQuery("option", this.widget);
    this.select = jQuery("#" + this.wid);
    this.selected = [];

    // Handle change
    jQuery("form", this.widget).on("submit", function () {
        return false;
    });

    var js_widget = this;
    this.select.on("change", function (evt) {
        js_widget.select_change(this, evt);
    });

    // Default value
    var value = this.select.val();
    if (value) {
        this.selected = this.widget.find("option:selected");
        Faceted.Query[this.wid] = [value];
    }

    // Bind events
    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        js_widget.synchronize();
    });
    jQuery(Faceted.Events).on(Faceted.Events.RESET, function () {
        js_widget.reset();
    });
};

Faceted.ResultsPerPageWidget.prototype = {
    select_change: function (element) {
        if (!jQuery(element).val()) {
            element = null;
        }
        this.do_query(element);
    },

    do_query: function (element) {
        if (!element) {
            this.selected = [];
            return Faceted.Form.do_query(this.wid, []);
        } else {
            var value = jQuery(element).val();
            this.selected = this.widget.find("option:selected");
            return Faceted.Form.do_query(this.wid, value);
        }
    },

    reset: function () {
        this.select.val("");
        this.selected = [];
        this.widget.removeClass("faceted-widget-active");
    },

    synchronize: function () {
        var value = Faceted.Query[this.wid];
        if (!value) {
            this.reset();
            return;
        }

        var context = this;
        jQuery.each(value, function () {
            var selected = context.widget.find("option:selected");
            if (!selected.length) {
                context.reset();
            } else {
                context.selected = selected;
                context.select.val(value);
                context.widget.addClass("faceted-widget-active");
            }
        });
    },

    criteria: function () {
        var html = [];
        var title = this.criteria_title();
        var body = this.criteria_body();
        if (title) {
            html.push(title);
        }
        if (body) {
            html.push(body);
        }
        return html;
    },

    criteria_title: function () {
        if (!this.selected.length) {
            return "";
        }

        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", "criteria_" + this.wid);
        link.attr("title", "Remove " + this.title + " filters");
        var widget = this;
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });

        var html = jQuery("<dt>");
        html.attr("id", "criteria_" + this.wid + "_label");
        html.append(link);
        html.append("<span>" + this.title + "</span>");
        return html;
    },

    criteria_body: function () {
        if (!this.selected.length) {
            return "";
        }

        var widget = this;
        var html = jQuery("<dd>");
        var span = jQuery('<span class="faceted-resultsperpage-criterion">');
        html.attr("id", "criteria_" + this.wid + "_entries");
        var element = jQuery(this.selected);
        var value = element.val();
        var label = element.html();
        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');

        link.attr("id", "criteria_" + this.wid + "_" + value);
        link.attr("title", "Remove " + label + " filter");
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });
        span.append(link);
        jQuery("<span>").text(label).appendTo(span);
        html.append(span);
        return html;
    },

    criteria_remove: function () {
        this.select.val("");
        this.do_query();
    },
};

Faceted.initializeResultsPerPageWidget = function () {
    jQuery("div.faceted-resultsperpage-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.ResultsPerPageWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(
    Faceted.Events.INITIALIZE,
    Faceted.initializeResultsPerPageWidget
);


/***/ }),

/***/ 958:
/***/ (function() {

/* Select Widget
 */
Faceted.SelectWidget = function (wid) {
    this.wid = wid;
    this.widget = jQuery("#" + this.wid + "_widget");
    this.widget.show();
    this.title = this.widget.find("legend").html();
    this.elements = this.widget.find("option");
    this.select = jQuery("#" + this.wid);
    this.selected = [];

    // Faceted version
    this.version = "";
    var version = jQuery("#faceted-version");
    if (version) {
        this.version = version.text();
    }

    // Handle change
    jQuery("form", this.widget).on("submit", function () {
        return false;
    });

    var js_widget = this;
    this.select.on("change", function (evt) {
        js_widget.select_change(this, evt);
    });

    // Default value
    var value = this.select.val();
    if (value) {
        this.selected = js_widget.widget.find("option:selected");
        Faceted.Query[this.wid] = [value];
    }

    // Bind events
    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        js_widget.synchronize();
    });
    jQuery(Faceted.Events).on(Faceted.Events.RESET, function () {
        js_widget.reset();
    });
    if (this.widget.hasClass("faceted-count")) {
        var sortcountable = this.widget.hasClass("faceted-sortcountable");
        jQuery(Faceted.Events).on(Faceted.Events.QUERY_INITIALIZED, function () {
            js_widget.count(sortcountable);
        });
        jQuery(Faceted.Events).on(Faceted.Events.FORM_DO_QUERY, function (evt, data) {
            if (data.wid == js_widget.wid || data.wid == "b_start") {
                return;
            }
            js_widget.count(sortcountable);
        });
    }
};

Faceted.SelectWidget.prototype = {
    select_change: function (element) {
        if (!jQuery(element).val()) {
            element = null;
        }
        this.do_query(element);
    },

    do_query: function (element) {
        if (!element) {
            this.selected = [];
            return Faceted.Form.do_query(this.wid, []);
        } else {
            var value = jQuery(element).val();
            this.selected = this.widget.find("option:selected");
            return Faceted.Form.do_query(this.wid, value);
        }
    },

    reset: function () {
        if (this.widget.hasClass("hide-all-option")) {
            var first_val = this.select.find("option:first").val();
            this.select.val(first_val);
            this.selected = [first_val];
            this.select_change(this.select);
        } else {
            this.select.val("");
            this.selected = [];
        }
        this.widget.removeClass("faceted-widget-active");
    },

    synchronize: function () {
        var value = Faceted.Query[this.wid];
        if (!value) {
            this.reset();
            return;
        }

        var context = this;
        jQuery.each(value, function () {
            var selected = context.widget.find('option[value="' + this + '"]');
            if (!selected.length) {
                context.reset();
            } else {
                context.selected = selected;
                context.select.val(value);
                context.widget.addClass("faceted-widget-active");
            }
        });
    },

    criteria: function () {
        var html = [];
        var title = this.criteria_title();
        var body = this.criteria_body();
        if (title) {
            html.push(title);
        }
        if (body) {
            html.push(body);
        }
        return html;
    },

    criteria_title: function () {
        if (!this.selected.length) {
            return "";
        }

        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", "criteria_" + this.wid);
        link.attr("title", "Remove " + this.title + " filters");
        var widget = this;
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });

        var html = jQuery("<dt>");
        html.attr("id", "criteria_" + this.wid + "_label");
        html.append(link);
        html.append("<span>" + this.title + "</span>");
        return html;
    },

    criteria_body: function () {
        if (!this.selected.length) {
            return "";
        }

        var widget = this;
        var html = jQuery("<dd>");
        var span = jQuery('<span class="faceted-select-criterion">');
        html.attr("id", "criteria_" + this.wid + "_entries");
        var element = jQuery(this.selected);
        var value = element.val();
        var label = element.attr("title");
        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');

        link.attr("id", "criteria_" + this.wid + "_" + value);
        link.attr("title", "Remove " + label + " filter");
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });
        span.append(link);
        jQuery("<span>").text(label).appendTo(span);
        html.append(span);

        return html;
    },

    criteria_remove: function () {
        this.select.val("");
        this.do_query();
    },

    count: function (sortcountable) {
        var query = Faceted.SortedQuery();
        query.cid = this.wid;
        if (this.version) {
            query.version = this.version;
        }

        var context = this;
        jQuery(Faceted.Events).trigger(Faceted.Events.AJAX_START, { wid: context.wid });
        jQuery.getJSON(Faceted.BASEURL + "@@faceted_counter", query, function (data) {
            context.count_update(data, sortcountable);
            jQuery(Faceted.Events).trigger(Faceted.Events.DO_UPDATE);
            jQuery(Faceted.Events).trigger(Faceted.Events.AJAX_STOP, {
                wid: context.wid,
            });
        });
    },

    count_update: function (data, sortcountable) {
        var context = this;
        var select = jQuery("select", context.widget);
        var options = jQuery("option", context.widget);
        var current_val = select.val();
        jQuery(options).each(function () {
            var option = jQuery(this);
            option.removeClass("faceted-select-item-disabled");
            option.attr("disabled", false);
            var key = option.val();

            var value = data[key];
            value = value ? value : 0;
            var option_txt = option.attr("title");
            option_txt += " (" + value + ")";

            option.html(option_txt);
            if (sortcountable) {
                option.data("count", value);
            }
            if (!value) {
                option.attr("disabled", "disabled");
                option.addClass("faceted-select-item-disabled");
            }
        });
        if (sortcountable) {
            options.detach().sort(function (x, y) {
                var a = jQuery(x).data("count");
                var b = jQuery(y).data("count");
                return b - a;
            });
            select.append(options);
            select.val(current_val);
        }
    },
};

Faceted.initializeSelectWidget = function () {
    jQuery("div.faceted-select-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.SelectWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(Faceted.Events.INITIALIZE, Faceted.initializeSelectWidget);


/***/ }),

/***/ 350:
/***/ (function() {

/* Sorting Widget
 */
Faceted.SortingWidget = function (wid) {
    this.wid = wid;
    this.widget = jQuery("#" + this.wid + "_widget");
    this.widget.show();
    this.title = jQuery("legend", this.widget).html();
    this.reverse = jQuery("#" + this.wid + "_reversed");
    this.elements = jQuery("option", this.widget);
    this.selected = [];
    this.select = jQuery("#" + this.wid);

    var error = jQuery(".faceted-widget:has(div.faceted-sorting-errors)");
    if (error.length) {
        error.remove();
        jQuery(Faceted.Events).trigger(Faceted.Events.REDRAW);
        return;
    }

    // Handle select change
    jQuery("form", this.widget).on("submit", function () {
        return false;
    });

    var js_widget = this;
    this.select.on("change", function (evt) {
        js_widget.select_change(this, evt);
    });
    this.reverse.on("click", function (evt) {
        js_widget.reverse_change(this, evt);
    });

    // Default value
    var value = this.select.val();
    if (value) {
        this.selected = this.widget.find("option:selected");
        Faceted.Query[this.wid] = [value];

        var reverse = this.reverse.prop("checked");
        if (reverse) {
            Faceted.Query.reversed = "on";
        }
    }

    // Bind events
    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        js_widget.synchronize();
    });
    jQuery(Faceted.Events).on(Faceted.Events.RESET, function () {
        js_widget.reset();
    });
};

Faceted.SortingWidget.prototype = {
    select_change: function (element) {
        this.do_query(element);
    },

    reverse_change: function (element) {
        this.do_query(element);
    },

    do_query: function (element) {
        if (!element) {
            this.selected = [];
            Faceted.Form.do_query(this.wid, []);
            return;
        }

        var value = null;
        if (jQuery(element).attr("type") == "checkbox") {
            value = element.checked ? "on" : [];
            if (!this.selected.length) {
                Faceted.Query.reversed = value;
                return;
            }
            Faceted.Form.do_query("reversed", value);
            return;
        } else {
            value = jQuery(element).val();
            if (!value) {
                this.selected = [];
                value = [];
            } else {
                this.selected = this.widget.find("option:selected");
            }
            Faceted.Form.do_query(this.wid, value);
            return;
        }
    },

    reset: function (reversed) {
        reversed = reversed ? true : false;
        this.select.val("");
        this.reverse.attr("checked", reversed);
        this.selected = [];
        this.widget.removeClass("faceted-widget-active");
    },

    synchronize: function () {
        var value = Faceted.Query[this.wid];
        var reversed_value = Faceted.Query.reversed;
        if (!reversed_value) {
            reversed_value = false;
        } else if (reversed_value.length == 1 && !reversed_value[0]) {
            /* reversed value is false if == [""] */
            reversed_value = false;
        } else {
            reversed_value = true;
        }
        if (!value) {
            this.reset(reversed_value);
            return;
        }

        var context = this;
        jQuery.each(value, function () {
            var selected = context.widget.find("option:selected");
            if (!selected.length) {
                context.reset(reversed_value);
            } else {
                context.selected = selected;
                context.select.val(value);
                context.reverse.attr("checked", reversed_value);
                context.widget.addClass("faceted-widget-active");
            }
        });
    },

    criteria: function () {
        var html = [];
        var title = this.criteria_title();
        var body = this.criteria_body();
        if (title) {
            html.push(title);
        }
        if (body) {
            html.push(body);
        }
        return html;
    },

    criteria_title: function () {
        if (!this.selected.length) {
            return "";
        }

        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", "criteria_" + this.wid);
        link.attr("title", "Remove " + this.title + " filters");
        var widget = this;
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });

        var html = jQuery("<dt>");
        html.attr("id", "criteria_" + this.wid + "_label");
        html.append(link);
        html.append("<span>" + this.title + "</span>");
        return html;
    },

    criteria_body: function () {
        if (!this.selected.length) {
            return "";
        }

        var widget = this;
        var html = jQuery("<dd>");
        var span = jQuery('<span class="faceted-sorting-criterion">');
        html.attr("id", "criteria_" + this.wid + "_entries");
        var element = jQuery(this.selected);
        var value = element.val();
        var label = element.html();
        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');

        link.attr("id", "criteria_" + this.wid + "_" + value);
        link.attr("title", "Remove " + label + " filter");
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });
        span.append(link);
        jQuery("<span>").text(label).appendTo(span);
        html.append(span);

        if (this.reverse.prop("checked")) {
            var rid = this.reverse.attr("id");
            var rlabel = jQuery("label[for=" + rid + "]").html();
            html.append("<span>(" + rlabel + ")</span>");
        }

        return html;
    },

    criteria_remove: function () {
        this.select.val("");
        this.reverse.attr("checked", false);
        this.do_query();
    },
};

Faceted.initializeSortingWidget = function () {
    jQuery("div.faceted-sorting-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.SortingWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(Faceted.Events.INITIALIZE, Faceted.initializeSortingWidget);


/***/ }),

/***/ 330:
/***/ (function() {

/*
 * jQuery TagCloud 0.5.0
 * Copyright (c) 2008 Ron Valstar
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */
(function ($) {
    // private variables
    var oSettings;
    var oUlCss = {};
    var oLiCss = {};
    var fGAng = 2.399963; // sphere angle in radians*pi
    // default settings
    $.tagcloud = {
        id: "TagCloud",
        version: "0.5.0",
        defaults: {
            height: null,
            type: "cloud", // "cloud", "list" or "sphere"
            sizemax: 20,
            sizemin: 10,
            colormax: "00F",
            colormin: "B4D2FF",
            seed: null, // only for type=="cloud"
            power: 0.5, // only for type=="sphere"
        },
    };
    $.fn.extend({
        tagcloud: function (_settings) {
            oSettings = $.extend({}, $.tagcloud.defaults, _settings);
            if (oSettings.seed === null)
                oSettings.seed = Math.ceil(Math.random() * 45309714203);

            switch (oSettings.type) {
                // treemap ::	http://www.jquery.info/The-TreeMap-plugin

                case "sphere":
                case "cloud":
                    oUlCss = { position: "relative" };
                    oLiCss = { position: "absolute", display: "block" };
                    break;
                case "list":
                    oUlCss = { height: "auto" };
                    oLiCss = { position: "static", display: "inline" };
                    break;
            }

            Rng.setSeed(oSettings.seed + 123456);

            return this.each(function (i, o) {
                var mUl = $(o);
                var aLi = mUl.find(">li");
                var iNumLi = aLi.length;

                var iUlW = mUl.width();
                //				var iUlH = oSettings.height===null?mUl.height():oSettings.height;
                var iUlH =
                    oSettings.height === null ? 0.004 * iUlW * iNumLi : oSettings.height;
                mUl.css({
                    width: iUlW,
                    height: iUlH,
                    listStyle: "none",
                    margin: 0,
                    padding: 0,
                });
                mUl.css(oUlCss);

                var iValMx = -2147483647;
                var iValMn = 2147483648;
                var iLastVal = -1;
                var j, x, k, mLi, iVal, iXps, iYps;
                for (j = 0; j < iNumLi; j++) {
                    mLi = $(aLi[j]);
                    iVal = mLi.attr("value") == -1 ? iLastVal++ : mLi.attr("value");
                    if (iVal > iValMx) iValMx = iVal;
                    if (iVal < iValMn) iValMn = iVal;
                    iLastVal = iVal;
                }
                var iValRn = iValMx - iValMn;

                // place on line to create minimal overlays
                var aLine = new Array();
                for (j = 0; j < iNumLi; j++) aLine[j] = j;
                for (
                    j, x, k = aLine.length;
                    k;
                    j = parseInt((Rng.rand(0, 1000) / 1000) * k),
                        x = aLine[--k],
                        aLine[k] = aLine[j],
                        aLine[j] = x
                );

                iLastVal = -1;
                for (j = 0; j < iNumLi; j++) {
                    mLi = $(aLi[j]);
                    iVal = mLi.attr("value") == -1 ? iLastVal++ : mLi.attr("value");
                    iLastVal = iVal;
                    //
                    var fPrt = (iNumLi - j - 1) / (iNumLi - 1);
                    fPrt = (iVal - iValMn) / iValRn;
                    //
                    var iSzFnt =
                        oSettings.sizemin +
                        fPrt * (oSettings.sizemax - oSettings.sizemin);
                    var sColor = colorRng(oSettings.colormin, oSettings.colormax, fPrt);
                    //
                    mLi.css({
                        fontSize: iSzFnt,
                        position: "absolute",
                        color: "#" + sColor,
                        margin: 0,
                        padding: 0,
                    })
                        .children()
                        .css({ color: "#" + sColor });
                    var iLiW = mLi.width();
                    var iLiH = mLi.height();
                    //
                    var oCss = {};
                    if (oSettings.type != "list") {
                        if (oSettings.type == "cloud") {
                            iXps = Rng.rand(0, iUlW - iLiW);
                            iYps = aLine[j] * (iUlH / iNumLi) - iLiH / 2;
                        } else {
                            var fRds = Math.pow(j / iNumLi, oSettings.power);
                            var fRad = (j + Math.PI / 2) * fGAng;
                            iXps =
                                iUlW / 2 - iLiW / 2 + 0.5 * iUlW * fRds * Math.sin(fRad);
                            iYps =
                                iUlH / 2 - iLiH / 2 + 0.5 * iUlH * fRds * Math.cos(fRad);
                        }
                        oCss.left = iXps;
                        oCss.top = iYps;
                    }
                    for (var prop in oLiCss) oCss[prop] = oLiCss[prop];
                    mLi.css(oCss);
                }
            });
        },
    });
    // Park-Miller RNG
    var Rng = new (function () {
        this.seed = 23145678901;
        this.A = 48271;
        this.M = 2147483647;
        this.Q = this.M / this.A;
        this.R = this.M % this.A;
        this.oneOverM = 1.0 / this.M;
    })();
    Rng.setSeed = function (seed) {
        this.seed = seed;
    };
    Rng.next = function () {
        var hi = this.seed / this.Q;
        var lo = this.seed % this.Q;
        var test = this.A * lo - this.R * hi;
        this.seed = test + (test > 0 ? 0 : this.M);
        return this.seed * this.oneOverM;
    };
    Rng.rand = function (lrn, urn) {
        return Math.floor((urn - lrn + 1) * this.next() + lrn);
    };
    // hex dec
    function d2h(d) {
        return d.toString(16);
    }
    function h2d(h) {
        return parseInt(h, 16);
    }
    //	function getC(s,rgb) {
    //		var aRng = [[[0,1],[1,2],[2,3]],[[0,2],[2,4],[4,6]]][s.length==3?0:1][rgb];
    //		return s.substring(aRng[0],aRng[1]);
    //	}
    function getRGB(s) {
        var b3 = s.length == 3;
        var aClr = [];
        for (var i = 0; i < 3; i++) {
            var sClr = s.substring(i * (b3 ? 1 : 2), (i + 1) * (b3 ? 1 : 2));
            aClr.push(h2d(b3 ? sClr + sClr : sClr));
        }
        return aClr;
    }
    function getHex(a) {
        var s = "";
        for (var i = 0; i < 3; i++) {
            var c = d2h(a[i]);
            if (c.length == 1) c = "0" + c; // todo: this can be better
            s += c;
        }
        return s;
    }
    function colorRng(mn, mx, prt) {
        var aMin = getRGB(mn);
        var aMax = getRGB(mx);
        var aRtr = [];
        for (var i = 0; i < 3; i++)
            aRtr.push(aMin[i] + Math.floor(prt * (aMax[i] - aMin[i])));
        return getHex(aRtr);
    }
    // // trace
    // function trace(o) {
    //   if (window.console&&window.console.log) {
    //     if (typeof(o)=="string")	window.console.log(o);
    //     else						for (var prop in o) window.console.log(prop+": "+o[prop]);
    //   }
    // };
    // set functions
    $.fn.TagCloud = $.fn.Tagcloud = $.fn.tagcloud;
})(jQuery);


/***/ }),

/***/ 897:
/***/ (function() {

Faceted.TagsCloudWidget = function (wid) {
    this.wid = wid;
    this.widget = jQuery("#" + wid + "_widget");
    this.widget.show();
    this.title = jQuery("legend", this.widget).html();
    this.tags = jQuery("li", this.widget);
    this.faceted_count = this.widget.hasClass("faceted-count");
    this.selected = [];

    // Faceted version
    this.version = "";
    var version = jQuery("#faceted-version");
    if (version) {
        this.version = version.text();
    }

    this.config = {};
    this.initialize();

    var selected = jQuery(".faceted-tag-selected", this.widget);
    if (selected.length) {
        var value = selected.attr("id").replace(this.wid, "");
        value = value.replace(/_-_/g, " ").replace(/_--_/g, "/");
        Faceted.Query[this.wid] = [value];
        this.synchronize();
    }

    // Handle clicks
    var js_widget = this;
    this.tags.on("click", function (evt) {
        js_widget.tag_click(this, evt);
    });

    // Bind events
    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        js_widget.synchronize();
    });
    jQuery(Faceted.Events).on(Faceted.Events.RESET, function () {
        js_widget.reset();
    });

    jQuery(Faceted.Events).on(Faceted.Events.QUERY_INITIALIZED, function () {
        js_widget.count();
    });
    jQuery(Faceted.Events).on(Faceted.Events.FORM_DO_QUERY, function (evt, data) {
        if (data.wid == js_widget.wid || data.wid == "b_start") {
            return;
        }
        js_widget.count();
    });

    // Resize window
    jQuery(Faceted.Events).on(Faceted.Events.WINDOW_WIDTH_CHANGED, function () {
        var width = js_widget.widget.width();
        jQuery("ul", js_widget.widget).width(width - 30);
        js_widget.update();
    });
};

Faceted.TagsCloudWidget.prototype = {
    initialize: function () {
        var cloud = jQuery("#" + this.wid + "-cloud", this.widget).text();
        cloud = cloud ? cloud : "list";
        var sizemin = jQuery("#" + this.wid + "-sizemin", this.widget).text();
        sizemin = parseInt(sizemin, 10);
        sizemin = sizemin ? sizemin : 10;
        var sizemax = jQuery("#" + this.wid + "-sizemax", this.widget).text();
        sizemax = parseInt(sizemax, 10);
        sizemax = sizemax ? sizemax : 20;
        var colormin = jQuery("#" + this.wid + "-colormin", this.widget).text();
        var colormax = jQuery("#" + this.wid + "-colormax", this.widget).text();
        var height = jQuery("#" + this.wid + "-height", this.widget).text();
        height = parseInt(height, 10);
        height = height ? height : 200;
        height = cloud == "list" ? "auto" : height;
        this.config = {
            type: cloud,
            sizemin: sizemin,
            sizemax: sizemax,
            height: height,
            colormin: colormin,
            colormax: colormax,
        };
        this.update();
    },

    update: function () {
        jQuery("#" + this.wid, this.widget).tagcloud(this.config);
    },

    tag_click: function (tag) {
        this.do_query(tag);
    },

    unselect: function (tag) {
        jQuery(tag).removeClass("faceted-tag-selected");
        this.selected = [];
        this.widget.removeClass("faceted-widget-active");
    },

    select: function (tag) {
        this.unselect(this.tags);
        jQuery(tag).addClass("faceted-tag-selected");
        if (jQuery(tag).attr("id").replace(this.wid, "") != "all") {
            this.selected = [tag];
            this.widget.addClass("faceted-widget-active");
        } else {
            this.widget.removeClass("faceted-widget-active");
        }
    },

    do_query: function (tag) {
        var value = jQuery(tag).attr("id").replace(this.wid, "");
        value = value.replace(/_-_/g, " ").replace(/_--_/g, "/");
        var selected_value = "";
        if (this.selected.length) {
            selected_value = jQuery(this.selected[0]).attr("id").replace(this.wid, "");
            selected_value = selected_value.replace(/_-_/g, " ").replace(/_--_/g, "/");
        }
        if (value == selected_value) {
            this.select(jQuery("#" + this.wid + "all", this.widget));
            value = [];
        } else {
            this.select(tag);
        }
        Faceted.Form.do_query(this.wid, value);
    },

    reset: function () {
        this.select(jQuery("#" + this.wid + "all", this.widget));
    },

    synchronize: function () {
        var value = Faceted.Query[this.wid];
        if (!value) {
            this.reset();
        } else {
            value = value[0].replace(/\s/g, "_-_").replace(/\//g, "_--_");
            var tag = jQuery("#" + this.wid + value, this.widget);
            if (tag.length) {
                this.select(tag[0]);
            }
        }
    },

    criteria: function () {
        var html = [];
        var title = this.criteria_title();
        var body = this.criteria_body();
        if (title) {
            html.push(title);
        }
        if (body) {
            html.push(body);
        }
        return html;
    },

    criteria_title: function () {
        if (!this.selected.length) {
            return "";
        }
        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", "criteria_" + this.wid);
        link.attr("title", "Remove " + this.title + " filters");
        var widget = this;
        link.on("click", function (evt) {
            widget.criteria_remove(this, evt);
            return false;
        });

        var html = jQuery("<dt>");
        html.attr("id", "criteria_" + this.wid + "_label");
        html.append(link);
        html.append("<span>" + this.title + "</span>");
        return html;
    },

    criteria_body: function () {
        if (!this.selected.length) {
            return "";
        }
        var tag_id = jQuery(this.selected[0]).attr("id");
        var label = jQuery(this.selected[0]).attr("title");
        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", "criteria_" + tag_id);
        link.attr("title", "Remove " + label + " filter");

        var widget = this;
        link.on("click", function (evt) {
            widget.criteria_remove(this, evt);
            return false;
        });

        var html = jQuery("<dd>");
        var span = jQuery('<span class="faceted-tagscloud-criterion">');
        html.attr("id", "criteria_" + this.wid + "_entries");

        span.append(link);
        jQuery("<span>").text(label).appendTo(span);
        html.append(span);
        return html;
    },

    criteria_remove: function () {
        this.do_query(this.selected[0]);
    },

    count: function () {
        var query = Faceted.SortedQuery();
        query.cid = this.wid;
        if (this.version) {
            query.version = this.version;
        }
        var context = this;

        jQuery(Faceted.Events).trigger(Faceted.Events.AJAX_START, { wid: context.wid });
        jQuery.get(Faceted.BASEURL + "@@tagscloud_counter", query, function (data) {
            context.count_update(data);
            jQuery(Faceted.Events).trigger(Faceted.Events.DO_UPDATE);
            jQuery(Faceted.Events).trigger(Faceted.Events.AJAX_STOP, {
                wid: context.wid,
            });
        });
    },

    count_update: function (data) {
        var js_widget = this;
        var all_id = js_widget.wid + "all";
        var fieldset = jQuery("fieldset", jQuery(data));
        js_widget.widget.html(fieldset);

        var min = 10000;
        jQuery("li", js_widget.widget).each(function () {
            var tag = jQuery(this);
            var val = tag.attr("value");
            val = parseInt(val, 10);
            if (val < min && val > 0) {
                min = val;
            }
        });
        var all_tag = jQuery("#" + all_id, js_widget.widget);
        var all = all_tag.attr("value");
        all_tag.attr("value", min);

        js_widget.tags = jQuery("li", this.widget);

        // Handle clicks
        js_widget.tags.on("click", function (evt) {
            js_widget.tag_click(this, evt);
        });

        if (!js_widget.faceted_count) {
            // Update
            js_widget.update();
            return;
        }

        // Count
        js_widget.tags.each(function () {
            var tag = jQuery(this);

            var html = tag.text();
            var value = parseInt(tag.attr("value"), 10);

            if (tag.attr("id") == all_id) {
                value = all;
            } else {
                value -= 1;
            }

            html = html.replace(/\s\(\d+\)/, "");
            html += " (" + value + ")";
            tag.html(html);

            tag.unbind();
            if (tag.attr("value") === 1 && tag.attr("id") != all_id) {
                tag.addClass("faceted-tag-disabled");
            } else {
                tag.removeClass("faceted-tag-disabled");
                tag.on("click", function (evt) {
                    js_widget.tag_click(this, evt);
                });
            }
        });

        // Update
        js_widget.update();
    },
};

Faceted.initializeTagsCloudWidget = function () {
    jQuery("div.faceted-tagscloud-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.TagsCloudWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(Faceted.Events.INITIALIZE, Faceted.initializeTagsCloudWidget);


/***/ }),

/***/ 478:
/***/ (function() {

/* Text Widget
 */
Faceted.TextWidget = function (wid) {
    this.wid = wid;
    this.widget = jQuery("#" + wid + "_widget");
    this.widget.show();
    this.title = jQuery("legend", this.widget).html();
    this.selected = [];
    this.button = jQuery("input[type=submit]", this.widget);
    this.input = jQuery("#" + this.wid);
    this.value = "";

    // Handle text change
    var js_widget = this;
    var form = this.widget.find("form");
    form.on("submit", function () {
        js_widget.text_change(js_widget.button);
        return false;
    });

    this.input.on("change", function () {
        form.trigger("submit");
    });

    // Default value
    var value = this.input.val();
    if (value) {
        this.selected = [this.input];
        this.value = value;
        Faceted.Query[this.wid] = [value];
    }

    // Bind events
    jQuery(Faceted.Events).on(Faceted.Events.QUERY_CHANGED, function () {
        js_widget.synchronize();
    });
    jQuery(Faceted.Events).on(Faceted.Events.RESET, function () {
        js_widget.reset();
    });
};

Faceted.TextWidget.prototype = {
    text_change: function (element) {
        if (this.value === this.input.val()) {
            return;
        }

        this.do_query(element);
        jQuery(element).removeClass("submitting");
    },

    do_query: function (element) {
        var value = this.input.val();
        value = value ? [value] : [];

        if (!element) {
            this.selected = [];
            this.value = "";
            return Faceted.Form.do_query(this.wid, []);
        }
        this.selected = [this.input];
        this.value = this.input.val();

        var where = jQuery("input[type=radio]:checked", this.widget);
        where = where.length == 1 ? where.val() : "all";
        if (where == "all") {
            return Faceted.Form.do_query(this.wid, value);
        }

        var current = Faceted.Query[this.wid];
        current = current ? current : [];
        if (value.length && !(value[0] in current)) {
            current.push(value[0]);
        }
        return Faceted.Form.do_query(this.wid, current);
    },

    reset: function () {
        this.selected = [];
        this.value = "";
        jQuery("#" + this.wid).val("");
        this.widget.removeClass("faceted-widget-active");
    },

    synchronize: function () {
        var value = Faceted.Query[this.wid];
        if (!value) {
            this.reset();
            return;
        }

        this.input.val(value);
        this.selected = [this.input];
        this.value = this.input.val();
        this.widget.addClass("faceted-widget-active");
    },

    criteria: function () {
        var html = [];
        var title = this.criteria_title();
        var body = this.criteria_body();
        if (title) {
            html.push(title);
        }
        if (body) {
            html.push(body);
        }
        return html;
    },

    criteria_title: function () {
        if (!this.selected.length) {
            return "";
        }

        var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
        link.attr("id", "criteria_" + this.wid);
        link.attr("title", "Remove " + this.title + " filters");
        var widget = this;
        link.on("click", function () {
            widget.criteria_remove();
            return false;
        });

        var html = jQuery("<dt>");
        html.attr("id", "criteria_" + this.wid + "_label");
        html.append(link);
        html.append("<span>" + this.title + "</span>");
        return html;
    },

    criteria_body: function () {
        if (!this.selected.length) {
            return "";
        }

        var widget = this;
        var html = jQuery("<dd>");
        var elements = Faceted.Query[this.wid];
        elements = elements ? elements : [];
        jQuery.each(elements, function () {
            var label = this.toString();
            if (label.length > 0) {
                var span = jQuery('<span class="faceted-text-criterion">');
                var link = jQuery('<a href="#" class="faceted-remove">remove</a>');
                link.attr("id", "criteria_" + widget.wid + "_" + label);
                link.attr("title", "Remove " + label + " filter");
                link.on("click", function () {
                    widget.criteria_remove(label);
                    return false;
                });
                span.append(link);
                jQuery("<span>").text(label).appendTo(span);
                html.append(span);
            }
        });
        return html;
    },

    criteria_remove: function (value) {
        this.input.val("");
        if (!value) {
            this.selected = [];
            this.value = "";
            this.do_query();
            return;
        }
        jQuery("#" + this.wid + "_place_current", this.widget).attr("checked", true);
        var element = jQuery("input[type=text]", this.widget);
        var current = Faceted.Query[this.wid];
        var index = jQuery.inArray(value, current);
        if (index == -1) {
            return;
        }
        current.splice(index, 1);
        Faceted.Query[this.wid] = current;
        this.do_query(element);
    },
};

Faceted.initializeTextWidget = function () {
    jQuery("div.faceted-text-widget").each(function () {
        var wid = jQuery(this).attr("id");
        wid = wid.split("_")[0];
        Faceted.Widgets[wid] = new Faceted.TextWidget(wid);
    });
};

// Initialize
jQuery(Faceted.Events).on(Faceted.Events.INITIALIZE, Faceted.initializeTextWidget);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";
/* harmony import */ var _eea_facetednavigation_browser_javascript_view_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(739);
/* harmony import */ var _eea_facetednavigation_browser_javascript_view_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_browser_javascript_view_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _eea_facetednavigation_browser_javascript_expand_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(603);
/* harmony import */ var _eea_facetednavigation_browser_javascript_expand_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_browser_javascript_expand_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _eea_facetednavigation_browser_javascript_independent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(293);
/* harmony import */ var _eea_facetednavigation_browser_javascript_independent_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_browser_javascript_independent_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _eea_facetednavigation_widgets_alphabetic_view_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(383);
/* harmony import */ var _eea_facetednavigation_widgets_alphabetic_view_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_alphabetic_view_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _eea_facetednavigation_widgets_autocomplete_view_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(117);
/* harmony import */ var _eea_facetednavigation_widgets_autocomplete_view_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_autocomplete_view_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _eea_facetednavigation_widgets_checkbox_view_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(185);
/* harmony import */ var _eea_facetednavigation_widgets_checkbox_view_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_checkbox_view_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _eea_facetednavigation_widgets_criteria_view_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(593);
/* harmony import */ var _eea_facetednavigation_widgets_criteria_view_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_criteria_view_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _eea_facetednavigation_widgets_date_view_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(411);
/* harmony import */ var _eea_facetednavigation_widgets_date_view_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_date_view_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _eea_facetednavigation_widgets_daterange_view_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(56);
/* harmony import */ var _eea_facetednavigation_widgets_daterange_view_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_daterange_view_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _eea_facetednavigation_widgets_debug_view_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(81);
/* harmony import */ var _eea_facetednavigation_widgets_debug_view_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_debug_view_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _eea_facetednavigation_widgets_multiselect_view_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(489);
/* harmony import */ var _eea_facetednavigation_widgets_multiselect_view_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_multiselect_view_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _eea_facetednavigation_widgets_path_tree_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(256);
/* harmony import */ var _eea_facetednavigation_widgets_path_tree_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_path_tree_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _eea_facetednavigation_widgets_path_view_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(763);
/* harmony import */ var _eea_facetednavigation_widgets_path_view_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_path_view_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _eea_facetednavigation_widgets_portlet_view_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(305);
/* harmony import */ var _eea_facetednavigation_widgets_portlet_view_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_portlet_view_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _eea_facetednavigation_widgets_radio_view_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(886);
/* harmony import */ var _eea_facetednavigation_widgets_radio_view_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_radio_view_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _eea_facetednavigation_widgets_range_view_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(143);
/* harmony import */ var _eea_facetednavigation_widgets_range_view_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_range_view_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _eea_facetednavigation_widgets_resultsperpage_view_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(710);
/* harmony import */ var _eea_facetednavigation_widgets_resultsperpage_view_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_resultsperpage_view_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var _eea_facetednavigation_widgets_select_view_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(958);
/* harmony import */ var _eea_facetednavigation_widgets_select_view_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_select_view_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var _eea_facetednavigation_widgets_sorting_view_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(350);
/* harmony import */ var _eea_facetednavigation_widgets_sorting_view_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_sorting_view_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var _eea_facetednavigation_widgets_tagscloud_tagcloud_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(330);
/* harmony import */ var _eea_facetednavigation_widgets_tagscloud_tagcloud_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_tagscloud_tagcloud_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var _eea_facetednavigation_widgets_tagscloud_view_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(897);
/* harmony import */ var _eea_facetednavigation_widgets_tagscloud_view_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_tagscloud_view_js__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var _eea_facetednavigation_widgets_text_view_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(478);
/* harmony import */ var _eea_facetednavigation_widgets_text_view_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(_eea_facetednavigation_widgets_text_view_js__WEBPACK_IMPORTED_MODULE_21__);
// View




// Widgets























}();
/******/ })()
;